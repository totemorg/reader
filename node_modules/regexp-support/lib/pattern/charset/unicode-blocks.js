"use strict";
/**
 * Created by user on 2018/5/6/006.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../util/index");
const index_2 = require("./index");
const blocks_1 = require("../cache/blocks");
exports.KEY_PREFIX = '\\p{';
exports.KEY_PREFIX_NEGATION = '\\P{';
exports.KEY_SUFFIX = '}';
/**
 * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html
 * @link https://en.wikipedia.org/wiki/Unicode_character_property
 */
exports.UNICODE_BLOCKS = {
    InBasic_Latin: false,
};
exports.UNICODE_BLOCKS_ALL = {
    ...blocks_1.default,
    ...exports.UNICODE_BLOCKS,
};
exports.PatternTest = {
    InBasic_Latin: [
        ['^\\p{InBasic_Latin}+$', 'u', '\u007F', true, 'test'],
        ['^\\p{InBasic_Latin}+$', 'u', '\u0080', false, 'test'],
    ],
};
exports.testUnicodeBlocks = index_1._createFnTestPattern(exports.PatternTest);
// @ts-ignore
function testUnicodeBlocksAll(RegExpClass = RegExp, testPatterns = exports.PatternTest) {
    return Object.keys(exports.UNICODE_BLOCKS_ALL).reduce(function (a, key) {
        a[key] = exports.testUnicodeBlocks(key, RegExpClass, testPatterns);
        return a;
    }, {});
}
exports.testUnicodeBlocksAll = testUnicodeBlocksAll;
function wrapToRegexName(name, negation) {
    let prefix = exports.KEY_PREFIX;
    if (negation) {
        prefix = exports.KEY_PREFIX_NEGATION;
    }
    return index_2._wrapToRegexName(name, prefix, exports.KEY_SUFFIX);
}
exports.wrapToRegexName = wrapToRegexName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pY29kZS1ibG9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1bmljb2RlLWJsb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUgsNENBQWlFO0FBQ2pFLG1DQUEyQztBQUUzQyw0Q0FBMkM7QUFLOUIsUUFBQSxVQUFVLEdBQUcsTUFBTSxDQUFDO0FBQ3BCLFFBQUEsbUJBQW1CLEdBQUcsTUFBTSxDQUFDO0FBQzdCLFFBQUEsVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUU5Qjs7O0dBR0c7QUFDVSxRQUFBLGNBQWMsR0FBRztJQUU3QixhQUFhLEVBQUUsS0FBSztDQUVwQixDQUFDO0FBRVcsUUFBQSxrQkFBa0IsR0FBRztJQUNqQyxHQUFHLGdCQUFZO0lBRWYsR0FBRyxzQkFBYztDQUNqQixDQUFDO0FBRVcsUUFBQSxXQUFXLEdBRXBCO0lBRUgsYUFBYSxFQUFFO1FBRWQsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUM7UUFDdEQsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7S0FFdkQ7Q0FFRCxDQUFDO0FBRVcsUUFBQSxpQkFBaUIsR0FBRyw0QkFBb0IsQ0FBQyxtQkFBVyxDQUFDLENBQUM7QUFFbkUsYUFBYTtBQUNiLFNBQWdCLG9CQUFvQixDQUFJLGNBQW9DLE1BQU0sRUFBRSxZQUFZLEdBQUcsbUJBQVc7SUFFN0csT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUc7UUFFN0QsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDLEVBQUUsRUFBK0IsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFQRCxvREFPQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxJQUFZLEVBQUUsUUFBa0I7SUFFL0QsSUFBSSxNQUFNLEdBQUcsa0JBQVUsQ0FBQztJQUV4QixJQUFJLFFBQVEsRUFDWjtRQUNDLE1BQU0sR0FBRywyQkFBbUIsQ0FBQztLQUM3QjtJQUVELE9BQU8sd0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxrQkFBVSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQVZELDBDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC81LzYvMDA2LlxuICovXG5cbmltcG9ydCB7IElDcmVhdGVSZWdFeHAsIElUeXBlQ3JlYXRlUmVnRXhwIH0gZnJvbSAnLi4vLi4vaW5kZXgnO1xuaW1wb3J0IHsgSVBhdHRlcm5UZXN0Rm4sIElQYXR0ZXJuVGVzdFJvdywgUGF0dGVyblN1cHBvcnQsIHRlc3RQYXR0ZXJuIH0gZnJvbSAnLi4vLi4vcGF0dGVybic7XG5pbXBvcnQgeyBfY3JlYXRlRm5UZXN0UGF0dGVybiwgbG9nX2RpciB9IGZyb20gJy4uLy4uL3V0aWwvaW5kZXgnO1xuaW1wb3J0IHsgX3dyYXBUb1JlZ2V4TmFtZSB9IGZyb20gJy4vaW5kZXgnO1xuXG5pbXBvcnQgQ0FDSEVfQkxPQ0tTIGZyb20gJy4uL2NhY2hlL2Jsb2Nrcyc7XG5pbXBvcnQgQ0FDSEVfQ0FURUdPUklFUyBmcm9tICcuLi9jYWNoZS9jYXRlZ29yaWVzJztcbmltcG9ydCBDQUNIRV9QUk9QRVJUSUVTIGZyb20gJy4uL2NhY2hlL3Byb3BlcnRpZXMnO1xuaW1wb3J0IENBQ0hFX1NDUklQVFMgZnJvbSAnLi4vY2FjaGUvc2NyaXB0cyc7XG5cbmV4cG9ydCBjb25zdCBLRVlfUFJFRklYID0gJ1xcXFxweyc7XG5leHBvcnQgY29uc3QgS0VZX1BSRUZJWF9ORUdBVElPTiA9ICdcXFxcUHsnO1xuZXhwb3J0IGNvbnN0IEtFWV9TVUZGSVggPSAnfSc7XG5cbi8qKlxuICogQGxpbmsgaHR0cDovLzJhbGl0eS5jb20vMjAxNy8wNy9yZWdleHAtdW5pY29kZS1wcm9wZXJ0eS1lc2NhcGVzLmh0bWxcbiAqIEBsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaWNvZGVfY2hhcmFjdGVyX3Byb3BlcnR5XG4gKi9cbmV4cG9ydCBjb25zdCBVTklDT0RFX0JMT0NLUyA9IHtcblxuXHRJbkJhc2ljX0xhdGluOiBmYWxzZSxcblxufTtcblxuZXhwb3J0IGNvbnN0IFVOSUNPREVfQkxPQ0tTX0FMTCA9IHtcblx0Li4uQ0FDSEVfQkxPQ0tTLFxuXG5cdC4uLlVOSUNPREVfQkxPQ0tTLFxufTtcblxuZXhwb3J0IGNvbnN0IFBhdHRlcm5UZXN0OiB7XG5cdFtrIGluIGtleW9mIHR5cGVvZiBVTklDT0RFX0JMT0NLU19BTExdPzogSVBhdHRlcm5UZXN0Um93W107XG59ID0ge1xuXG5cdEluQmFzaWNfTGF0aW46IFtcblxuXHRcdFsnXlxcXFxwe0luQmFzaWNfTGF0aW59KyQnLCAndScsICdcXHUwMDdGJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XHRbJ15cXFxccHtJbkJhc2ljX0xhdGlufSskJywgJ3UnLCAnXFx1MDA4MCcsIGZhbHNlLCAndGVzdCddLFxuXG5cdF0sXG5cbn07XG5cbmV4cG9ydCBjb25zdCB0ZXN0VW5pY29kZUJsb2NrcyA9IF9jcmVhdGVGblRlc3RQYXR0ZXJuKFBhdHRlcm5UZXN0KTtcblxuLy8gQHRzLWlnbm9yZVxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RVbmljb2RlQmxvY2tzQWxsPFQ+KFJlZ0V4cENsYXNzOiBJVHlwZUNyZWF0ZVJlZ0V4cDxUPiA9IFJlZ0V4cCwgdGVzdFBhdHRlcm5zID0gUGF0dGVyblRlc3QpXG57XG5cdHJldHVybiBPYmplY3Qua2V5cyhVTklDT0RFX0JMT0NLU19BTEwpLnJlZHVjZShmdW5jdGlvbiAoYSwga2V5KVxuXHR7XG5cdFx0YVtrZXldID0gdGVzdFVuaWNvZGVCbG9ja3Moa2V5LCBSZWdFeHBDbGFzcywgdGVzdFBhdHRlcm5zKTtcblx0XHRyZXR1cm4gYTtcblx0fSwge30gYXMgdHlwZW9mIFVOSUNPREVfQkxPQ0tTX0FMTCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwVG9SZWdleE5hbWUobmFtZTogc3RyaW5nLCBuZWdhdGlvbj86IGJvb2xlYW4pXG57XG5cdGxldCBwcmVmaXggPSBLRVlfUFJFRklYO1xuXG5cdGlmIChuZWdhdGlvbilcblx0e1xuXHRcdHByZWZpeCA9IEtFWV9QUkVGSVhfTkVHQVRJT047XG5cdH1cblxuXHRyZXR1cm4gX3dyYXBUb1JlZ2V4TmFtZShuYW1lLCBwcmVmaXgsIEtFWV9TVUZGSVgpO1xufVxuXG4iXX0=