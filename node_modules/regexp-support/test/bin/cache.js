"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const globby = require("globby");
const fs = require("fs-extra");
exports.REGEXPP_PATH = path.dirname(require.resolve('regexpp2/package.json'));
exports.REGEXPP_PATH_DATA = path.join(exports.REGEXPP_PATH, 'src/unicode/property-data');
exports.XREGEXP_PATH = path.dirname(require.resolve('xregexp/package.json'));
exports.XREGEXP_PATH_DATA = path.join(exports.XREGEXP_PATH, 'tools/output');
(async () => {
    const PropertyData = await Promise.resolve().then(() => require(exports.REGEXPP_PATH_DATA)).then(v => v.default);
    let output = [];
    let def = [
        '$LONE',
        'General_Category',
        'Script',
    ];
    def.forEach(function (key) {
        //console.log(PropertyData[key]);
        let d = [...PropertyData[key]]
            .reduce(function (a, b) {
            a[b] = false;
            return a;
        }, {});
        let s = JSON.stringify(d, null, "\t");
        output.push(`export const ${key} = ${s};`);
    });
    output.push(`export default { ${def.join(', ')} }`);
    let name = 'property-data';
    let file = path.join(__dirname, '../../', 'lib/pattern/cache', name + '.ts');
    fs.outputFile(file, output.join('\n\n'));
})();
globby([
    '*.js',
], {
    cwd: exports.XREGEXP_PATH_DATA,
})
    .then((ls) => {
    ls.forEach(async function (value) {
        let name = path.parse(value).name;
        let data = await getData(name);
        let aa = {};
        let d = Object
            .values(data)
            .reduce(function (a, b) {
            a[b.name] = false;
            if (b.alias) {
                a[b.alias] = a[b.name];
                aa[b.name] = b.alias;
                aa[b.alias] = b.name;
            }
            return a;
        }, {});
        let s = JSON.stringify(d, null, "\t");
        fs.outputFile(path.join(__dirname, '../../', 'lib/pattern/cache', name + '.ts'), `export default ${s};\n\nexport const NAME_ALIAS = ${JSON.stringify(aa, null, "\t")};`);
    });
});
function getData(name) {
    let file = path.join(exports.XREGEXP_PATH_DATA, name);
    return Promise.resolve().then(() => require(file));
}
exports.getData = getData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFDakMsK0JBQStCO0FBRWxCLFFBQUEsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFXLENBQUM7QUFFaEYsUUFBQSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFZLEVBQUUsMkJBQTJCLENBQVcsQ0FBQztBQUVuRixRQUFBLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBVyxDQUFDO0FBRS9FLFFBQUEsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBWSxFQUFFLGNBQWMsQ0FBVyxDQUFDO0FBRW5GLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFHWCxNQUFNLFlBQVksR0FBRyxNQUFNLHFDQUFPLHlCQUFpQixHQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUxRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsSUFBSSxHQUFHLEdBQUc7UUFDVCxPQUFPO1FBQ1Asa0JBQWtCO1FBQ2xCLFFBQVE7S0FDUixDQUFDO0lBRUYsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7UUFHeEIsaUNBQWlDO1FBRWpDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDNUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQVM7WUFFN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUViLE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUNOO1FBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXRDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTVDLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEQsSUFBSSxJQUFJLEdBQUcsZUFBZSxDQUFDO0lBRTNCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFFN0UsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBRTFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxNQUFNLENBQUM7SUFDTixNQUFNO0NBQ04sRUFBRTtJQUNGLEdBQUcsRUFBRSx5QkFBaUI7Q0FDdEIsQ0FBQztLQUNBLElBQUksQ0FBQyxDQUFDLEVBQVksRUFBRSxFQUFFO0lBRXRCLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxXQUFXLEtBQUs7UUFFL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFbEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0IsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRVosSUFBSSxDQUFDLEdBQUcsTUFBTTthQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUM7YUFDWixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FHcEI7WUFFQSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUVsQixJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQ1g7Z0JBQ0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUV2QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUNyQjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUNOO1FBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxrQ0FBa0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxSyxDQUFDLENBQUMsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUNGO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLElBQVk7SUFFbkMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUU5Qyw0Q0FBYyxJQUFJLEdBQUU7QUFDckIsQ0FBQztBQUxELDBCQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGdsb2JieSBmcm9tICdnbG9iYnknO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuXG5leHBvcnQgY29uc3QgUkVHRVhQUF9QQVRIID0gcGF0aC5kaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgncmVnZXhwcDIvcGFja2FnZS5qc29uJykpIGFzIHN0cmluZztcblxuZXhwb3J0IGNvbnN0IFJFR0VYUFBfUEFUSF9EQVRBID0gcGF0aC5qb2luKFJFR0VYUFBfUEFUSCwgJ3NyYy91bmljb2RlL3Byb3BlcnR5LWRhdGEnKSBhcyBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCBYUkVHRVhQX1BBVEggPSBwYXRoLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKCd4cmVnZXhwL3BhY2thZ2UuanNvbicpKSBhcyBzdHJpbmc7XG5cbmV4cG9ydCBjb25zdCBYUkVHRVhQX1BBVEhfREFUQSA9IHBhdGguam9pbihYUkVHRVhQX1BBVEgsICd0b29scy9vdXRwdXQnKSBhcyBzdHJpbmc7XG5cbihhc3luYyAoKSA9Plxue1xuXG5cdGNvbnN0IFByb3BlcnR5RGF0YSA9IGF3YWl0IGltcG9ydChSRUdFWFBQX1BBVEhfREFUQSkudGhlbih2ID0+IHYuZGVmYXVsdCk7XG5cblx0bGV0IG91dHB1dCA9IFtdO1xuXHRsZXQgZGVmID0gW1xuXHRcdCckTE9ORScsXG5cdFx0J0dlbmVyYWxfQ2F0ZWdvcnknLFxuXHRcdCdTY3JpcHQnLFxuXHRdO1xuXG5cdGRlZi5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpXG5cdHtcblxuXHRcdC8vY29uc29sZS5sb2coUHJvcGVydHlEYXRhW2tleV0pO1xuXG5cdFx0bGV0IGQgPSBbLi4uUHJvcGVydHlEYXRhW2tleV1dXG5cdFx0XHQucmVkdWNlKGZ1bmN0aW9uIChhLCBiOiBzdHJpbmcpXG5cdFx0XHR7XG5cdFx0XHRcdGFbYl0gPSBmYWxzZTtcblxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sIHt9KVxuXHRcdDtcblxuXHRcdGxldCBzID0gSlNPTi5zdHJpbmdpZnkoZCwgbnVsbCwgXCJcXHRcIik7XG5cblx0XHRvdXRwdXQucHVzaChgZXhwb3J0IGNvbnN0ICR7a2V5fSA9ICR7c307YCk7XG5cblx0fSk7XG5cblx0b3V0cHV0LnB1c2goYGV4cG9ydCBkZWZhdWx0IHsgJHtkZWYuam9pbignLCAnKX0gfWApO1xuXG5cdGxldCBuYW1lID0gJ3Byb3BlcnR5LWRhdGEnO1xuXG5cdGxldCBmaWxlID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uLycsICdsaWIvcGF0dGVybi9jYWNoZScsIG5hbWUgKyAnLnRzJyk7XG5cblx0ZnMub3V0cHV0RmlsZShmaWxlLCBvdXRwdXQuam9pbignXFxuXFxuJykpO1xuXG59KSgpO1xuXG5nbG9iYnkoW1xuXHQnKi5qcycsXG5dLCB7XG5cdGN3ZDogWFJFR0VYUF9QQVRIX0RBVEEsXG59KVxuXHQudGhlbigobHM6IHN0cmluZ1tdKSA9PiB7XG5cblx0XHRscy5mb3JFYWNoKGFzeW5jIGZ1bmN0aW9uICh2YWx1ZSlcblx0XHR7XG5cdFx0XHRsZXQgbmFtZSA9IHBhdGgucGFyc2UodmFsdWUpLm5hbWU7XG5cblx0XHRcdGxldCBkYXRhID0gYXdhaXQgZ2V0RGF0YShuYW1lKTtcblxuXHRcdFx0bGV0IGFhID0ge307XG5cblx0XHRcdGxldCBkID0gT2JqZWN0XG5cdFx0XHRcdC52YWx1ZXMoZGF0YSlcblx0XHRcdFx0LnJlZHVjZShmdW5jdGlvbiAoYSwgYjoge1xuXHRcdFx0XHRcdG5hbWU6IHN0cmluZyxcblx0XHRcdFx0XHRhbGlhcz86IHN0cmluZyxcblx0XHRcdFx0fSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFbYi5uYW1lXSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKGIuYWxpYXMpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0YVtiLmFsaWFzXSA9IGFbYi5uYW1lXTtcblxuXHRcdFx0XHRcdFx0YWFbYi5uYW1lXSA9IGIuYWxpYXM7XG5cdFx0XHRcdFx0XHRhYVtiLmFsaWFzXSA9IGIubmFtZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdFx0fSwge30pXG5cdFx0XHQ7XG5cblx0XHRcdGxldCBzID0gSlNPTi5zdHJpbmdpZnkoZCwgbnVsbCwgXCJcXHRcIik7XG5cblx0XHRcdGZzLm91dHB1dEZpbGUocGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uLycsICdsaWIvcGF0dGVybi9jYWNoZScsIG5hbWUgKyAnLnRzJyksIGBleHBvcnQgZGVmYXVsdCAke3N9O1xcblxcbmV4cG9ydCBjb25zdCBOQU1FX0FMSUFTID0gJHtKU09OLnN0cmluZ2lmeShhYSwgbnVsbCwgXCJcXHRcIil9O2ApO1xuXHRcdH0pXG5cdH0pXG47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhKG5hbWU6IHN0cmluZylcbntcblx0bGV0IGZpbGUgPSBwYXRoLmpvaW4oWFJFR0VYUF9QQVRIX0RBVEEsIG5hbWUpO1xuXG5cdHJldHVybiBpbXBvcnQoZmlsZSk7XG59XG4iXX0=