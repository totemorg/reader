"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const line_1 = require("segment-dict/lib/loader/line");
const util_1 = require("../util");
const core_1 = require("./core");
/**
 * 原版 node-segment 的格式
 */
class TableDictLine extends core_1.default {
    exists(data, ...argv) {
        let w = this._exists(data);
        let bool = this.TABLE[w];
        return typeof bool === 'boolean' ? bool : null;
    }
    add(word) {
        let self = this;
        if (Array.isArray(word)) {
            word.forEach(v => self._add(v));
        }
        else {
            self._add(word);
        }
        return this;
    }
    _add(word) {
        word = word.trim();
        if (word) {
            this.TABLE[word] = true;
        }
    }
    remove(word) {
        let self = this;
        self._remove(word);
        return this;
    }
    _remove(word) {
        delete this.TABLE[word];
    }
    json() {
        return util_1.cloneDeep(this.TABLE);
    }
    stringify(LF = "\n") {
        let self = this;
        return Object.entries(self.TABLE)
            .reduce(function (a, [w, bool]) {
            if (bool) {
                let line = line_1.stringifyLine(w);
                a.push(line);
            }
            return a;
        }, [])
            .join(typeof LF === 'string' ? LF : "\n");
    }
}
exports.TableDictLine = TableDictLine;
exports.default = TableDictLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx1REFBdUU7QUFFdkUsa0NBQW9DO0FBRXBDLGlDQUF3RTtBQUV4RTs7R0FFRztBQUNILE1BQXNCLGFBQWMsU0FBUSxjQUE4QjtJQUVsRSxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSTtRQUUxQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFekIsT0FBTyxPQUFPLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0lBQy9DLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBdUI7UUFFMUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWhCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFDdkI7WUFDQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQy9CO2FBRUQ7WUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSSxDQUFDLElBQVk7UUFFaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVuQixJQUFJLElBQUksRUFDUjtZQUNDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBRWxCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5CLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBRW5CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN4QixDQUFDO0lBRUQsSUFBSTtRQUVILE9BQU8sZ0JBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUFFLEdBQUcsSUFBSTtRQUVsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFFaEIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDL0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQztZQUU3QixJQUFJLElBQUksRUFDUjtnQkFDQyxJQUFJLElBQUksR0FBRyxvQkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2I7WUFFRCxPQUFPLENBQUMsQ0FBQTtRQUNULENBQUMsRUFBRSxFQUFFLENBQUM7YUFDTCxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUN4QztJQUNILENBQUM7Q0FDRDtBQXpFRCxzQ0F5RUM7QUFFRCxrQkFBZSxhQUFhLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRElDVF9TWU5PTllNLCBJV29yZCB9IGZyb20gJy4uL1NlZ21lbnQnO1xuaW1wb3J0IHsgSURpY3RSb3csIHN0cmluZ2lmeUxpbmUgfSBmcm9tICdzZWdtZW50LWRpY3QvbGliL2xvYWRlci9saW5lJztcbmltcG9ydCBDamtDb252IGZyb20gJ2Nqay1jb252JztcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgdGV4dF9saXN0IH0gZnJvbSAnLi4vdXRpbC9jamsnO1xuaW1wb3J0IEFic3RyYWN0VGFibGVEaWN0Q29yZSwgeyBJRElDVCwgSURJQ1QyLCBJT3B0aW9ucyB9IGZyb20gJy4vY29yZSc7XG5cbi8qKlxuICog5Y6f54mIIG5vZGUtc2VnbWVudCDnmoTmoLzlvI9cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRhYmxlRGljdExpbmUgZXh0ZW5kcyBBYnN0cmFjdFRhYmxlRGljdENvcmU8Ym9vbGVhbj5cbntcblx0cHVibGljIGV4aXN0cyhkYXRhLCAuLi5hcmd2KVxuXHR7XG5cdFx0bGV0IHcgPSB0aGlzLl9leGlzdHMoZGF0YSk7XG5cblx0XHRsZXQgYm9vbCA9IHRoaXMuVEFCTEVbd107XG5cblx0XHRyZXR1cm4gdHlwZW9mIGJvb2wgPT09ICdib29sZWFuJyA/IGJvb2wgOiBudWxsXG5cdH1cblxuXHRhZGQod29yZDogc3RyaW5nIHwgc3RyaW5nW10pXG5cdHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh3b3JkKSlcblx0XHR7XG5cdFx0XHR3b3JkLmZvckVhY2godiA9PiBzZWxmLl9hZGQodikpXG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRzZWxmLl9hZGQod29yZCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRfYWRkKHdvcmQ6IHN0cmluZylcblx0e1xuXHRcdHdvcmQgPSB3b3JkLnRyaW0oKTtcblxuXHRcdGlmICh3b3JkKVxuXHRcdHtcblx0XHRcdHRoaXMuVEFCTEVbd29yZF0gPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdHJlbW92ZSh3b3JkOiBzdHJpbmcpXG5cdHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cdFx0c2VsZi5fcmVtb3ZlKHdvcmQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRfcmVtb3ZlKHdvcmQ6IHN0cmluZylcblx0e1xuXHRcdGRlbGV0ZSB0aGlzLlRBQkxFW3dvcmRdXG5cdH1cblxuXHRqc29uKClcblx0e1xuXHRcdHJldHVybiBjbG9uZURlZXAodGhpcy5UQUJMRSlcblx0fVxuXG5cdHN0cmluZ2lmeShMRiA9IFwiXFxuXCIpXG5cdHtcblx0XHRsZXQgc2VsZiA9IHRoaXM7XG5cblx0XHRyZXR1cm4gT2JqZWN0LmVudHJpZXMoc2VsZi5UQUJMRSlcblx0XHRcdC5yZWR1Y2UoZnVuY3Rpb24gKGEsIFt3LCBib29sXSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGJvb2wpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsZXQgbGluZSA9IHN0cmluZ2lmeUxpbmUodyk7XG5cdFx0XHRcdFx0YS5wdXNoKGxpbmUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFcblx0XHRcdH0sIFtdKVxuXHRcdFx0LmpvaW4odHlwZW9mIExGID09PSAnc3RyaW5nJyA/IExGIDogXCJcXG5cIilcblx0XHRcdDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWJsZURpY3RMaW5lXG4iXX0=