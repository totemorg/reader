"use strict";
/**
 * Created by user on 2018/8/18/018.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mod_1 = require("../mod");
class ForeignOptimizer extends mod_1.SubSModuleOptimizer {
    constructor() {
        super(...arguments);
        this.name = 'ForeignOptimizer';
    }
    _cache() {
        super._cache();
        this._TABLE = this.segment.getDict('TABLE');
        this._POSTAG = this.segment.POSTAG;
    }
    doOptimize(words) {
        const self = this;
        const POSTAG = this._POSTAG;
        const TABLE = this._TABLE;
        let i = 0;
        let len = words.length - 1;
        while (i < len) {
            let w0 = words[i - 1];
            let w1 = words[i];
            let w2 = words[i + 1];
            if (!(w1.p === POSTAG.A_NX)) {
                i++;
                continue;
            }
            if (w2) {
                let nw = w1.w + w2.w;
                let mw = TABLE[nw];
                if (mw) {
                    let new_w = self.debugToken({
                        ...mw,
                        w: nw,
                        m: [w1, w2],
                    }, {
                        [this.name]: 1,
                    }, true);
                    this.sliceToken(words, i, 2, new_w);
                    len--;
                    continue;
                }
            }
            i++;
        }
        return words;
    }
}
exports.ForeignOptimizer = ForeignOptimizer;
exports.init = ForeignOptimizer.init.bind(ForeignOptimizer);
exports.default = ForeignOptimizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9yZWlnbk9wdGltaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkZvcmVpZ25PcHRpbWl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILGdDQUF5RDtBQVN6RCxNQUFhLGdCQUFpQixTQUFRLHlCQUFtQjtJQUF6RDs7UUFFQyxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUE0RDNCLENBQUM7SUF4REEsTUFBTTtRQUVMLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxDQUFDO0lBRUQsVUFBVSxDQUF1QixLQUFVO1FBRTFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNsQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFM0IsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUNkO1lBQ0MsSUFBSSxFQUFFLEdBQWUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsQyxJQUFJLEVBQUUsR0FBZSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxFQUFFLEdBQWUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUVsQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDM0I7Z0JBQ0MsQ0FBQyxFQUFFLENBQUM7Z0JBQ0osU0FBUzthQUNUO1lBRUQsSUFBSSxFQUFFLEVBQ047Z0JBQ0MsSUFBSSxFQUFFLEdBQVcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLEVBQUUsR0FBZSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRS9CLElBQUksRUFBRSxFQUNOO29CQUNDLElBQUksS0FBSyxHQUFlLElBQUksQ0FBQyxVQUFVLENBQUM7d0JBQ3ZDLEdBQUcsRUFBRTt3QkFDTCxDQUFDLEVBQUUsRUFBRTt3QkFDTCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO3FCQUNYLEVBQUU7d0JBQ0YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztxQkFDZCxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUVULElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBRXBDLEdBQUcsRUFBRSxDQUFDO29CQUNOLFNBQVM7aUJBQ1Q7YUFDRDtZQUVELENBQUMsRUFBRSxDQUFDO1NBQ0o7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7Q0FDRDtBQTlERCw0Q0E4REM7QUFFWSxRQUFBLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFpQyxDQUFDO0FBRWpHLGtCQUFlLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC84LzE4LzAxOC5cbiAqL1xuXG5pbXBvcnQgeyBTdWJTTW9kdWxlLCBTdWJTTW9kdWxlT3B0aW1pemVyIH0gZnJvbSAnLi4vbW9kJztcbmltcG9ydCBQT1NUQUcgZnJvbSAnLi4vUE9TVEFHJztcbmltcG9ydCBTZWdtZW50LCB7IElESUNULCBJRElDVF9TWU5PTllNLCBJV29yZCB9IGZyb20gJy4uL1NlZ21lbnQnO1xuaW1wb3J0IHsgSVdvcmREZWJ1ZyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgaGV4QW5kQW55IH0gZnJvbSAnLi4vdXRpbC9pbmRleCc7XG5pbXBvcnQgeyBDT0xPUl9BTEwsIENPTE9SX0hBSVIgfSBmcm9tICcuLi9tb2QvQ09MT1JTJztcblxuaW1wb3J0IFVTdHJpbmcgZnJvbSAndW5pLXN0cmluZyc7XG5cbmV4cG9ydCBjbGFzcyBGb3JlaWduT3B0aW1pemVyIGV4dGVuZHMgU3ViU01vZHVsZU9wdGltaXplclxue1xuXHRuYW1lID0gJ0ZvcmVpZ25PcHRpbWl6ZXInO1xuXG5cdHByb3RlY3RlZCBfVEFCTEU6IElESUNUPElXb3JkPjtcblxuXHRfY2FjaGUoKVxuXHR7XG5cdFx0c3VwZXIuX2NhY2hlKCk7XG5cblx0XHR0aGlzLl9UQUJMRSA9IHRoaXMuc2VnbWVudC5nZXREaWN0KCdUQUJMRScpO1xuXHRcdHRoaXMuX1BPU1RBRyA9IHRoaXMuc2VnbWVudC5QT1NUQUc7XG5cdH1cblxuXHRkb09wdGltaXplPFQgZXh0ZW5kcyBJV29yZERlYnVnPih3b3JkczogVFtdKTogVFtdXG5cdHtcblx0XHRjb25zdCBzZWxmID0gdGhpcztcblx0XHRjb25zdCBQT1NUQUcgPSB0aGlzLl9QT1NUQUc7XG5cdFx0Y29uc3QgVEFCTEUgPSB0aGlzLl9UQUJMRTtcblxuXHRcdGxldCBpID0gMDtcblx0XHRsZXQgbGVuID0gd29yZHMubGVuZ3RoIC0gMTtcblxuXHRcdHdoaWxlIChpIDwgbGVuKVxuXHRcdHtcblx0XHRcdGxldCB3MDogSVdvcmREZWJ1ZyA9IHdvcmRzW2kgLSAxXTtcblx0XHRcdGxldCB3MTogSVdvcmREZWJ1ZyA9IHdvcmRzW2ldO1xuXHRcdFx0bGV0IHcyOiBJV29yZERlYnVnID0gd29yZHNbaSArIDFdO1xuXG5cdFx0XHRpZiAoISh3MS5wID09PSBQT1NUQUcuQV9OWCkpXG5cdFx0XHR7XG5cdFx0XHRcdGkrKztcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh3Milcblx0XHRcdHtcblx0XHRcdFx0bGV0IG53OiBzdHJpbmcgPSB3MS53ICsgdzIudztcblx0XHRcdFx0bGV0IG13OiBJV29yZERlYnVnID0gVEFCTEVbbnddO1xuXG5cdFx0XHRcdGlmIChtdylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGxldCBuZXdfdzogSVdvcmREZWJ1ZyA9IHNlbGYuZGVidWdUb2tlbih7XG5cdFx0XHRcdFx0XHQuLi5tdyxcblx0XHRcdFx0XHRcdHc6IG53LFxuXHRcdFx0XHRcdFx0bTogW3cxLCB3Ml0sXG5cdFx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdFx0W3RoaXMubmFtZV06IDEsXG5cdFx0XHRcdFx0fSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHR0aGlzLnNsaWNlVG9rZW4od29yZHMsIGksIDIsIG5ld193KTtcblxuXHRcdFx0XHRcdGxlbi0tO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gd29yZHM7XG5cdH1cbn1cblxuZXhwb3J0IGNvbnN0IGluaXQgPSBGb3JlaWduT3B0aW1pemVyLmluaXQuYmluZChGb3JlaWduT3B0aW1pemVyKSBhcyB0eXBlb2YgRm9yZWlnbk9wdGltaXplci5pbml0O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JlaWduT3B0aW1pemVyO1xuIl19