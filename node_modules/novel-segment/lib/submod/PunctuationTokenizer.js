'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 标点符号识别模块
 *
 * @author 老雷<leizongmin@gmail.com>
 */
const mod_1 = require("../mod");
const STOPWORD_1 = require("../mod/data/STOPWORD");
class PunctuationTokenizer extends mod_1.SubSModuleTokenizer {
    constructor() {
        super(...arguments);
        this.name = 'PunctuationTokenizer';
        this._STOPWORD = STOPWORD_1._STOPWORD;
        this.STOPWORD = STOPWORD_1.STOPWORD;
        this.STOPWORD2 = STOPWORD_1.STOPWORD2;
    }
    /**
     * 对未识别的单词进行分词
     *
     * @param {array} words 单词数组
     * @return {array}
     */
    split(words) {
        const POSTAG = this._POSTAG;
        const self = this;
        let ret = [];
        for (let i = 0, word; word = words[i]; i++) {
            if (word.p > 0) {
                ret.push(word);
                continue;
            }
            // 仅对未识别的词进行匹配
            let stopinfo = self.matchStopword(word.w);
            if (stopinfo.length < 1) {
                ret.push(word);
                continue;
            }
            // 分离出标点符号
            let lastc = 0;
            for (let ui = 0, sw; sw = stopinfo[ui]; ui++) {
                if (sw.c > lastc) {
                    ret.push({
                        w: word.w.substr(lastc, sw.c - lastc)
                    });
                }
                ret.push(self.debugToken({
                    w: sw.w,
                    p: POSTAG.D_W
                }, {
                    [self.name]: true,
                }, true));
                lastc = sw.c + sw.w.length;
            }
            let lastsw = stopinfo[stopinfo.length - 1];
            if (lastsw.c + lastsw.w.length < word.w.length) {
                ret.push({
                    w: word.w.substr(lastsw.c + lastsw.w.length)
                });
            }
        }
        return ret;
    }
    /**
     * 匹配包含的标点符号，返回相关信息
     *
     * @param {string} text 文本
     * @param {int} cur 开始位置
     * @return {array}  返回格式   {w: '网址', c: 开始位置}
     */
    matchStopword(text, cur) {
        const STOPWORD2 = this.STOPWORD2;
        if (isNaN(cur))
            cur = 0;
        let ret = [];
        let isMatch = false;
        while (cur < text.length) {
            let w;
            for (let i in STOPWORD2) {
                w = text.substr(cur, i);
                if (w in STOPWORD2[i]) {
                    ret.push({ w: w, c: cur });
                    isMatch = true;
                    break;
                }
            }
            cur += isMatch === false ? 1 : w.length;
            isMatch = false;
        }
        return ret;
    }
}
exports.PunctuationTokenizer = PunctuationTokenizer;
// debug(STOPWORD2);
exports.init = PunctuationTokenizer.init.bind(PunctuationTokenizer);
exports.default = PunctuationTokenizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHVuY3R1YXRpb25Ub2tlbml6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQdW5jdHVhdGlvblRva2VuaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBRWI7Ozs7R0FJRztBQUVILGdDQUE2QztBQUk3QyxtREFBc0U7QUFFdEUsTUFBYSxvQkFBcUIsU0FBUSx5QkFBbUI7SUFBN0Q7O1FBRUMsU0FBSSxHQUFHLHNCQUFzQixDQUFDO1FBRXZCLGNBQVMsR0FBRyxvQkFBUyxDQUFDO1FBQ3RCLGFBQVEsR0FBRyxtQkFBUSxDQUFDO1FBQ3BCLGNBQVMsR0FBRyxvQkFBUyxDQUFDO0lBNEY5QixDQUFDO0lBMUZBOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLEtBQWM7UUFFbkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQzFDO1lBQ0MsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDZDtnQkFDQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLFNBQVM7YUFDVDtZQUNELGNBQWM7WUFDZCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUN2QjtnQkFDQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLFNBQVM7YUFDVDtZQUNELFVBQVU7WUFDVixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDZCxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFDNUM7Z0JBQ0MsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFDaEI7b0JBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQzt3QkFDUixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO3FCQUNyQyxDQUFDLENBQUM7aUJBQ0g7Z0JBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUN4QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ1AsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHO2lCQUNiLEVBQUU7b0JBQ0YsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSTtpQkFDakIsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUVWLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2FBQzNCO1lBQ0QsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUM5QztnQkFDQyxHQUFHLENBQUMsSUFBSSxDQUFDO29CQUNSLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2lCQUM1QyxDQUFDLENBQUM7YUFDSDtTQUNEO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsYUFBYSxDQUFDLElBQVksRUFBRSxHQUFZO1FBRXZDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFakMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFDeEI7WUFDQyxJQUFJLENBQUMsQ0FBQztZQUNOLEtBQUssSUFBSSxDQUFDLElBQUksU0FBUyxFQUN2QjtnQkFDQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBa0IsQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQ3JCO29CQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDO29CQUNmLE1BQU07aUJBQ047YUFDRDtZQUNELEdBQUcsSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDeEMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUNoQjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ1osQ0FBQztDQUNEO0FBbEdELG9EQWtHQztBQUVELG9CQUFvQjtBQUVQLFFBQUEsSUFBSSxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQXFDLENBQUM7QUFFN0csa0JBQWUsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICog5qCH54K556ym5Y+36K+G5Yir5qih5Z2XXG4gKlxuICogQGF1dGhvciDogIHpm7c8bGVpem9uZ21pbkBnbWFpbC5jb20+XG4gKi9cblxuaW1wb3J0IHsgU3ViU01vZHVsZVRva2VuaXplciB9IGZyb20gJy4uL21vZCc7XG5pbXBvcnQgU2VnbWVudCwgeyBJV29yZCB9IGZyb20gJy4uL1NlZ21lbnQnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBVU3RyaW5nIGZyb20gJ3VuaS1zdHJpbmcnO1xuaW1wb3J0IHsgX1NUT1BXT1JELCBTVE9QV09SRCwgU1RPUFdPUkQyIH0gZnJvbSAnLi4vbW9kL2RhdGEvU1RPUFdPUkQnO1xuXG5leHBvcnQgY2xhc3MgUHVuY3R1YXRpb25Ub2tlbml6ZXIgZXh0ZW5kcyBTdWJTTW9kdWxlVG9rZW5pemVyXG57XG5cdG5hbWUgPSAnUHVuY3R1YXRpb25Ub2tlbml6ZXInO1xuXG5cdHB1YmxpYyBfU1RPUFdPUkQgPSBfU1RPUFdPUkQ7XG5cdHB1YmxpYyBTVE9QV09SRCA9IFNUT1BXT1JEO1xuXHRwdWJsaWMgU1RPUFdPUkQyID0gU1RPUFdPUkQyO1xuXG5cdC8qKlxuXHQgKiDlr7nmnKror4bliKvnmoTljZXor43ov5vooYzliIbor41cblx0ICpcblx0ICogQHBhcmFtIHthcnJheX0gd29yZHMg5Y2V6K+N5pWw57uEXG5cdCAqIEByZXR1cm4ge2FycmF5fVxuXHQgKi9cblx0c3BsaXQod29yZHM6IElXb3JkW10pOiBJV29yZFtdXG5cdHtcblx0XHRjb25zdCBQT1NUQUcgPSB0aGlzLl9QT1NUQUc7XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHRsZXQgcmV0ID0gW107XG5cdFx0Zm9yIChsZXQgaSA9IDAsIHdvcmQ7IHdvcmQgPSB3b3Jkc1tpXTsgaSsrKVxuXHRcdHtcblx0XHRcdGlmICh3b3JkLnAgPiAwKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXQucHVzaCh3b3JkKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHQvLyDku4Xlr7nmnKror4bliKvnmoTor43ov5vooYzljLnphY1cblx0XHRcdGxldCBzdG9waW5mbyA9IHNlbGYubWF0Y2hTdG9wd29yZCh3b3JkLncpO1xuXHRcdFx0aWYgKHN0b3BpbmZvLmxlbmd0aCA8IDEpXG5cdFx0XHR7XG5cdFx0XHRcdHJldC5wdXNoKHdvcmQpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vIOWIhuemu+WHuuagh+eCueespuWPt1xuXHRcdFx0bGV0IGxhc3RjID0gMDtcblx0XHRcdGZvciAobGV0IHVpID0gMCwgc3c7IHN3ID0gc3RvcGluZm9bdWldOyB1aSsrKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoc3cuYyA+IGxhc3RjKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0LnB1c2goe1xuXHRcdFx0XHRcdFx0dzogd29yZC53LnN1YnN0cihsYXN0Yywgc3cuYyAtIGxhc3RjKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0LnB1c2goc2VsZi5kZWJ1Z1Rva2VuKHtcblx0XHRcdFx0XHR3OiBzdy53LFxuXHRcdFx0XHRcdHA6IFBPU1RBRy5EX1dcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdFtzZWxmLm5hbWVdOiB0cnVlLFxuXHRcdFx0XHR9LCB0cnVlKSk7XG5cblx0XHRcdFx0bGFzdGMgPSBzdy5jICsgc3cudy5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0XHRsZXQgbGFzdHN3ID0gc3RvcGluZm9bc3RvcGluZm8ubGVuZ3RoIC0gMV07XG5cdFx0XHRpZiAobGFzdHN3LmMgKyBsYXN0c3cudy5sZW5ndGggPCB3b3JkLncubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXQucHVzaCh7XG5cdFx0XHRcdFx0dzogd29yZC53LnN1YnN0cihsYXN0c3cuYyArIGxhc3Rzdy53Lmxlbmd0aClcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHQvKipcblx0ICog5Yy56YWN5YyF5ZCr55qE5qCH54K556ym5Y+377yM6L+U5Zue55u45YWz5L+h5oGvXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IOaWh+acrFxuXHQgKiBAcGFyYW0ge2ludH0gY3VyIOW8gOWni+S9jee9rlxuXHQgKiBAcmV0dXJuIHthcnJheX0gIOi/lOWbnuagvOW8jyAgIHt3OiAn572R5Z2AJywgYzog5byA5aeL5L2N572ufVxuXHQgKi9cblx0bWF0Y2hTdG9wd29yZCh0ZXh0OiBzdHJpbmcsIGN1cj86IG51bWJlcik6IElXb3JkW11cblx0e1xuXHRcdGNvbnN0IFNUT1BXT1JEMiA9IHRoaXMuU1RPUFdPUkQyO1xuXG5cdFx0aWYgKGlzTmFOKGN1cikpIGN1ciA9IDA7XG5cdFx0bGV0IHJldCA9IFtdO1xuXHRcdGxldCBpc01hdGNoID0gZmFsc2U7XG5cdFx0d2hpbGUgKGN1ciA8IHRleHQubGVuZ3RoKVxuXHRcdHtcblx0XHRcdGxldCB3O1xuXHRcdFx0Zm9yIChsZXQgaSBpbiBTVE9QV09SRDIpXG5cdFx0XHR7XG5cdFx0XHRcdHcgPSB0ZXh0LnN1YnN0cihjdXIsIGkgYXMgYW55IGFzIG51bWJlcik7XG5cdFx0XHRcdGlmICh3IGluIFNUT1BXT1JEMltpXSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldC5wdXNoKHsgdzogdywgYzogY3VyIH0pO1xuXHRcdFx0XHRcdGlzTWF0Y2ggPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjdXIgKz0gaXNNYXRjaCA9PT0gZmFsc2UgPyAxIDogdy5sZW5ndGg7XG5cdFx0XHRpc01hdGNoID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxufVxuXG4vLyBkZWJ1ZyhTVE9QV09SRDIpO1xuXG5leHBvcnQgY29uc3QgaW5pdCA9IFB1bmN0dWF0aW9uVG9rZW5pemVyLmluaXQuYmluZChQdW5jdHVhdGlvblRva2VuaXplcikgYXMgdHlwZW9mIFB1bmN0dWF0aW9uVG9rZW5pemVyLmluaXQ7XG5cbmV4cG9ydCBkZWZhdWx0IFB1bmN0dWF0aW9uVG9rZW5pemVyO1xuIl19