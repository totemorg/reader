'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const const_1 = require("../mod/const");
/** 模块类型 */
exports.type = 'optimizer';
/**
 * 模块初始化
 *
 * @param {Segment} segment 分词接口
 */
function init(_segment) {
    exports.segment = _segment;
}
exports.init = init;
/**
 * 日期时间优化
 *
 * @param {array} words 单词数组
 * @param {bool} is_not_first 是否为管理器调用的
 * @return {array}
 */
function doOptimize(words, is_not_first) {
    if (typeof is_not_first == 'undefined') {
        is_not_first = false;
    }
    // 合并相邻的能组成一个单词的两个词
    const TABLE = exports.segment.getDict('TABLE');
    const POSTAG = exports.segment.POSTAG;
    let i = 0;
    let ie = words.length - 1;
    while (i < ie) {
        let w1 = words[i];
        let w2 = words[i + 1];
        //debug(w1.w + ', ' + w2.w);
        if ((w1.p & POSTAG.A_M) > 0) {
            // =========================================
            // 日期时间组合   数字 + 日期单位，如 “2005年"
            if (w2.w in const_1.DATETIME) {
                let nw = w1.w + w2.w;
                let len = 2;
                let ma = [w1, w2];
                // 继续搜索后面连续的日期时间描述，必须符合  数字 + 日期单位
                while (true) {
                    let w11 = words[i + len];
                    let w22 = words[i + len + 1];
                    if (w11 && w22 && (w11.p & POSTAG.A_M) > 0 && w22.w in const_1.DATETIME) {
                        len += 2;
                        nw += w11.w + w22.w;
                        ma.push(w11);
                        ma.push(w22);
                    }
                    else {
                        break;
                    }
                }
                words.splice(i, len, {
                    w: nw,
                    p: POSTAG.D_T,
                    m: ma,
                });
                ie -= len - 1;
                continue;
            }
            // =========================================
        }
        // 移到下一个词
        i++;
    }
    return words;
}
exports.doOptimize = doOptimize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZXRpbWVPcHRpbWl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJEYXRldGltZU9wdGltaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7O0FBV2Isd0NBQXdDO0FBRXhDLFdBQVc7QUFDRSxRQUFBLElBQUksR0FBRyxXQUFXLENBQUM7QUFHaEM7Ozs7R0FJRztBQUNILFNBQWdCLElBQUksQ0FBQyxRQUFRO0lBRTVCLGVBQU8sR0FBRyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQUhELG9CQUdDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLEtBQWMsRUFBRSxZQUFzQjtJQUVoRSxJQUFJLE9BQU8sWUFBWSxJQUFJLFdBQVcsRUFDdEM7UUFDQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0tBQ3JCO0lBQ0QsbUJBQW1CO0lBQ25CLE1BQU0sS0FBSyxHQUFHLGVBQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsZUFBTyxDQUFDLE1BQU0sQ0FBQztJQUU5QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMxQixPQUFPLENBQUMsR0FBRyxFQUFFLEVBQ2I7UUFDQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0Qiw0QkFBNEI7UUFFNUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDM0I7WUFDQyw0Q0FBNEM7WUFDNUMsK0JBQStCO1lBQy9CLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxnQkFBUSxFQUNwQjtnQkFDQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFWixJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFbEIsa0NBQWtDO2dCQUNsQyxPQUFPLElBQUksRUFDWDtvQkFDQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO29CQUN6QixJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksZ0JBQVEsRUFDL0Q7d0JBQ0MsR0FBRyxJQUFJLENBQUMsQ0FBQzt3QkFDVCxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUVwQixFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNiLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ2I7eUJBRUQ7d0JBQ0MsTUFBTTtxQkFDTjtpQkFDRDtnQkFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUU7b0JBQ3BCLENBQUMsRUFBRSxFQUFFO29CQUNMLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRztvQkFDYixDQUFDLEVBQUUsRUFBRTtpQkFDTCxDQUFDLENBQUM7Z0JBQ0gsRUFBRSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ2QsU0FBUzthQUNUO1lBQ0QsNENBQTRDO1NBQzVDO1FBRUQsU0FBUztRQUNULENBQUMsRUFBRSxDQUFDO0tBQ0o7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUM7QUEvREQsZ0NBK0RDIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIOaXpeacn+aXtumXtOS8mOWMluaooeWdl1xuICpcbiAqIEBhdXRob3Ig6ICB6Zu3PGxlaXpvbmdtaW5AZ21haWwuY29tPlxuICovXG5cbmltcG9ydCBTZWdtZW50LCB7IElXb3JkIH0gZnJvbSAnLi4vU2VnbWVudCc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgYXJyX2NqayB9IGZyb20gJy4uL3V0aWwvY2prJztcbmltcG9ydCB7IERBVEVUSU1FIH0gZnJvbSAnLi4vbW9kL2NvbnN0JztcblxuLyoqIOaooeWdl+exu+WeiyAqL1xuZXhwb3J0IGNvbnN0IHR5cGUgPSAnb3B0aW1pemVyJztcbmV4cG9ydCBsZXQgc2VnbWVudDogU2VnbWVudDtcblxuLyoqXG4gKiDmqKHlnZfliJ3lp4vljJZcbiAqXG4gKiBAcGFyYW0ge1NlZ21lbnR9IHNlZ21lbnQg5YiG6K+N5o6l5Y+jXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KF9zZWdtZW50KVxue1xuXHRzZWdtZW50ID0gX3NlZ21lbnQ7XG59XG5cbi8qKlxuICog5pel5pyf5pe26Ze05LyY5YyWXG4gKlxuICogQHBhcmFtIHthcnJheX0gd29yZHMg5Y2V6K+N5pWw57uEXG4gKiBAcGFyYW0ge2Jvb2x9IGlzX25vdF9maXJzdCDmmK/lkKbkuLrnrqHnkIblmajosIPnlKjnmoRcbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZG9PcHRpbWl6ZSh3b3JkczogSVdvcmRbXSwgaXNfbm90X2ZpcnN0PzogYm9vbGVhbilcbntcblx0aWYgKHR5cGVvZiBpc19ub3RfZmlyc3QgPT0gJ3VuZGVmaW5lZCcpXG5cdHtcblx0XHRpc19ub3RfZmlyc3QgPSBmYWxzZTtcblx0fVxuXHQvLyDlkIjlubbnm7jpgrvnmoTog73nu4TmiJDkuIDkuKrljZXor43nmoTkuKTkuKror41cblx0Y29uc3QgVEFCTEUgPSBzZWdtZW50LmdldERpY3QoJ1RBQkxFJyk7XG5cdGNvbnN0IFBPU1RBRyA9IHNlZ21lbnQuUE9TVEFHO1xuXG5cdGxldCBpID0gMDtcblx0bGV0IGllID0gd29yZHMubGVuZ3RoIC0gMTtcblx0d2hpbGUgKGkgPCBpZSlcblx0e1xuXHRcdGxldCB3MSA9IHdvcmRzW2ldO1xuXHRcdGxldCB3MiA9IHdvcmRzW2kgKyAxXTtcblx0XHQvL2RlYnVnKHcxLncgKyAnLCAnICsgdzIudyk7XG5cblx0XHRpZiAoKHcxLnAgJiBQT1NUQUcuQV9NKSA+IDApXG5cdFx0e1xuXHRcdFx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0XHRcdC8vIOaXpeacn+aXtumXtOe7hOWQiCAgIOaVsOWtlyArIOaXpeacn+WNleS9je+8jOWmgiDigJwyMDA15bm0XCJcblx0XHRcdGlmICh3Mi53IGluIERBVEVUSU1FKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgbncgPSB3MS53ICsgdzIudztcblx0XHRcdFx0bGV0IGxlbiA9IDI7XG5cblx0XHRcdFx0bGV0IG1hID0gW3cxLCB3Ml07XG5cblx0XHRcdFx0Ly8g57un57ut5pCc57Si5ZCO6Z2i6L+e57ut55qE5pel5pyf5pe26Ze05o+P6L+w77yM5b+F6aG756ym5ZCIICDmlbDlrZcgKyDml6XmnJ/ljZXkvY1cblx0XHRcdFx0d2hpbGUgKHRydWUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRsZXQgdzExID0gd29yZHNbaSArIGxlbl07XG5cdFx0XHRcdFx0bGV0IHcyMiA9IHdvcmRzW2kgKyBsZW4gKyAxXTtcblx0XHRcdFx0XHRpZiAodzExICYmIHcyMiAmJiAodzExLnAgJiBQT1NUQUcuQV9NKSA+IDAgJiYgdzIyLncgaW4gREFURVRJTUUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGVuICs9IDI7XG5cdFx0XHRcdFx0XHRudyArPSB3MTEudyArIHcyMi53O1xuXG5cdFx0XHRcdFx0XHRtYS5wdXNoKHcxMSk7XG5cdFx0XHRcdFx0XHRtYS5wdXNoKHcyMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0d29yZHMuc3BsaWNlKGksIGxlbiwge1xuXHRcdFx0XHRcdHc6IG53LFxuXHRcdFx0XHRcdHA6IFBPU1RBRy5EX1QsXG5cdFx0XHRcdFx0bTogbWEsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZSAtPSBsZW4gLSAxO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdFx0fVxuXG5cdFx0Ly8g56e75Yiw5LiL5LiA5Liq6K+NXG5cdFx0aSsrO1xuXHR9XG5cblx0cmV0dXJuIHdvcmRzO1xufVxuIl19