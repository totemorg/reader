"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("deepmerge-plus/core");
const debug_1 = require("../../util/debug");
function convertSynonym(ret, options) {
    const { showcount, POSTAG, DICT_SYNONYM, DICT_TABLE } = options;
    let total_count = 0;
    //const RAW = Symbol.for('RAW');
    // 转换同义词
    function _convertSynonym(list) {
        let count = 0;
        list = list.reduce(function (a, item) {
            let bool;
            let w = item.w;
            let nw;
            let debug = debug_1.debugToken(item);
            if (w in DICT_SYNONYM) {
                bool = true;
                nw = DICT_SYNONYM[w];
            }
            else if (debug.autoCreate && !debug.convertSynonym && !item.ow && item.m && item.m.length) {
                nw = item.m.reduce(function (a, b) {
                    if (typeof b == 'string') {
                        a.push(b);
                    }
                    else if (b.w in DICT_SYNONYM) {
                        a.push(DICT_SYNONYM[b.w]);
                        bool = true;
                    }
                    else {
                        a.push(b.w);
                    }
                    return a;
                }, []).join('');
            }
            if (bool) {
                count++;
                total_count++;
                //return { w: DICT_SYNONYM[item.w], p: item.p };
                let p = item.p;
                if (w in DICT_TABLE) {
                    p = DICT_TABLE[w].p || p;
                }
                if (p & POSTAG.BAD) {
                    p = p ^ POSTAG.BAD;
                }
                let item_new = debug_1.debugToken({
                    ...item,
                    w: nw,
                    ow: w,
                    p,
                    op: item.p,
                }, {
                    convertSynonym: true,
                    //_source: item,
                    /**
                     * JSON.stringify
                     * avoid TypeError: Converting circular structure to JSON
                     */
                    _source: core_1.default({}, item),
                }, true);
                a.push(item_new);
            }
            else {
                a.push(item);
            }
            debug = undefined;
            return a;
        }, []);
        return { count: count, list: list };
    }
    let result;
    do {
        result = _convertSynonym(ret);
        ret = result.list;
        result.list = undefined;
    } while (result.count > 0);
    result = undefined;
    if (showcount) {
        return { count: total_count, list: ret };
    }
    return ret;
}
exports.convertSynonym = convertSynonym;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFN5bm9ueW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb252ZXJ0U3lub255bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE0QztBQUM1Qyw0Q0FBMEQ7QUFtQzFELFNBQWdCLGNBQWMsQ0FBQyxHQUFpQixFQUFFLE9BQWlCO0lBRWxFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFaEUsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLGdDQUFnQztJQUVoQyxRQUFRO0lBQ1IsU0FBUyxlQUFlLENBQUMsSUFBa0I7UUFFMUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBZ0I7WUFFL0MsSUFBSSxJQUFhLENBQUM7WUFDbEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksRUFBVSxDQUFDO1lBRWYsSUFBSSxLQUFLLEdBQUcsa0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU3QixJQUFJLENBQUMsSUFBSSxZQUFZLEVBQ3JCO2dCQUNDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ1osRUFBRSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtpQkFDSSxJQUFJLEtBQUssQ0FBQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUN6RjtnQkFDQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFXLEVBQUUsQ0FBQztvQkFFMUMsSUFBSSxPQUFPLENBQUMsSUFBSSxRQUFRLEVBQ3hCO3dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ1Y7eUJBQ0ksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFlBQVksRUFDNUI7d0JBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzFCLElBQUksR0FBRyxJQUFJLENBQUM7cUJBQ1o7eUJBRUQ7d0JBQ0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ1o7b0JBRUQsT0FBTyxDQUFDLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNoQjtZQUVELElBQUksSUFBSSxFQUNSO2dCQUNDLEtBQUssRUFBRSxDQUFDO2dCQUNSLFdBQVcsRUFBRSxDQUFDO2dCQUNkLGdEQUFnRDtnQkFFaEQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFFZixJQUFJLENBQUMsSUFBSSxVQUFVLEVBQ25CO29CQUNDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDekI7Z0JBRUQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFDbEI7b0JBQ0MsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNuQjtnQkFFRCxJQUFJLFFBQVEsR0FBRyxrQkFBVSxDQUFDO29CQUN6QixHQUFHLElBQUk7b0JBRVAsQ0FBQyxFQUFFLEVBQUU7b0JBQ0wsRUFBRSxFQUFFLENBQUM7b0JBQ0wsQ0FBQztvQkFDRCxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBS1YsRUFBRTtvQkFDRixjQUFjLEVBQUUsSUFBSTtvQkFDcEIsZ0JBQWdCO29CQUVoQjs7O3VCQUdHO29CQUNILE9BQU8sRUFBRSxjQUFTLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBZTtpQkFFMUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFVCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2pCO2lCQUVEO2dCQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDYjtZQUVELEtBQUssR0FBRyxTQUFTLENBQUM7WUFFbEIsT0FBTyxDQUFDLENBQUM7UUFDVixDQUFDLEVBQUUsRUFBa0IsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQWtDLENBQUM7SUFDckUsQ0FBQztJQUVELElBQUksTUFBb0MsQ0FBQztJQUN6QyxHQUNBO1FBQ0MsTUFBTSxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUVsQixNQUFNLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztLQUN4QixRQUNNLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0lBRXpCLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFFbkIsSUFBSSxTQUFTLEVBQ2I7UUFDQyxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7S0FDekM7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUF4SEQsd0NBd0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UtcGx1cy9jb3JlJztcbmltcG9ydCB7IGRlYnVnVG9rZW4sIElXb3JkRGVidWcgfSBmcm9tICcuLi8uLi91dGlsL2RlYnVnJztcbmltcG9ydCB7IElESUNULCBJRElDVF9TWU5PTllNLCBJV29yZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBQT1NUQUcgZnJvbSAnLi4vLi4vUE9TVEFHJztcbmltcG9ydCB7IElUU092ZXJ3cml0ZSB9IGZyb20gJ3RzLXR5cGUnO1xuXG5pbnRlcmZhY2UgSU9wdGlvbnNcbntcblx0LyoqXG5cdCAqIGZvciBkZWJ1Z1xuXHQgKi9cblx0c2hvd2NvdW50PzogYm9vbGVhbixcblx0RElDVF9TWU5PTllNOiBJRElDVF9TWU5PTllNLFxuXHRESUNUX1RBQkxFOiBJRElDVDxJV29yZD4sXG5cdFBPU1RBRzogdHlwZW9mIFBPU1RBRyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29udmVydFN5bm9ueW1XaXRoU2hvd2NvdW50XG57XG5cdGNvdW50OiBudW1iZXIsXG5cdGxpc3Q6IElXb3JkRGVidWdbXSxcbn1cblxuLyoqXG4gKiDovazmjaLlkIzkuYnor41cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRTeW5vbnltKHJldDogSVdvcmREZWJ1Z1tdLCBvcHRpb25zOiBJVFNPdmVyd3JpdGU8SU9wdGlvbnMsIHtcblx0c2hvd2NvdW50OiB0cnVlLFxufT4pOiB7XG5cdGNvdW50OiBudW1iZXIsXG5cdGxpc3Q6IElXb3JkRGVidWdbXSxcbn1cbi8qKlxuICog6L2s5o2i5ZCM5LmJ6K+NXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0U3lub255bShyZXQ6IElXb3JkRGVidWdbXSwgb3B0aW9ucz86IElPcHRpb25zKTogSVdvcmREZWJ1Z1tdXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFN5bm9ueW0ocmV0OiBJV29yZERlYnVnW10sIG9wdGlvbnM6IElPcHRpb25zKVxue1xuXHRjb25zdCB7IHNob3djb3VudCwgUE9TVEFHLCBESUNUX1NZTk9OWU0sIERJQ1RfVEFCTEUgfSA9IG9wdGlvbnM7XG5cblx0bGV0IHRvdGFsX2NvdW50ID0gMDtcblxuXHQvL2NvbnN0IFJBVyA9IFN5bWJvbC5mb3IoJ1JBVycpO1xuXG5cdC8vIOi9rOaNouWQjOS5ieivjVxuXHRmdW5jdGlvbiBfY29udmVydFN5bm9ueW0obGlzdDogSVdvcmREZWJ1Z1tdKVxuXHR7XG5cdFx0bGV0IGNvdW50ID0gMDtcblx0XHRsaXN0ID0gbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGl0ZW06IElXb3JkRGVidWcpXG5cdFx0e1xuXHRcdFx0bGV0IGJvb2w6IGJvb2xlYW47XG5cdFx0XHRsZXQgdyA9IGl0ZW0udztcblx0XHRcdGxldCBudzogc3RyaW5nO1xuXG5cdFx0XHRsZXQgZGVidWcgPSBkZWJ1Z1Rva2VuKGl0ZW0pO1xuXG5cdFx0XHRpZiAodyBpbiBESUNUX1NZTk9OWU0pXG5cdFx0XHR7XG5cdFx0XHRcdGJvb2wgPSB0cnVlO1xuXHRcdFx0XHRudyA9IERJQ1RfU1lOT05ZTVt3XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKGRlYnVnLmF1dG9DcmVhdGUgJiYgIWRlYnVnLmNvbnZlcnRTeW5vbnltICYmICFpdGVtLm93ICYmIGl0ZW0ubSAmJiBpdGVtLm0ubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHRudyA9IGl0ZW0ubS5yZWR1Y2UoZnVuY3Rpb24gKGE6IHN0cmluZ1tdLCBiKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBiID09ICdzdHJpbmcnKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGEucHVzaChiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAoYi53IGluIERJQ1RfU1lOT05ZTSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhLnB1c2goRElDVF9TWU5PTllNW2Iud10pO1xuXHRcdFx0XHRcdFx0Ym9vbCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRhLnB1c2goYi53KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdFx0fSwgW10pLmpvaW4oJycpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYm9vbClcblx0XHRcdHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG90YWxfY291bnQrKztcblx0XHRcdFx0Ly9yZXR1cm4geyB3OiBESUNUX1NZTk9OWU1baXRlbS53XSwgcDogaXRlbS5wIH07XG5cblx0XHRcdFx0bGV0IHAgPSBpdGVtLnA7XG5cblx0XHRcdFx0aWYgKHcgaW4gRElDVF9UQUJMRSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHAgPSBESUNUX1RBQkxFW3ddLnAgfHwgcDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChwICYgUE9TVEFHLkJBRClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHAgPSBwIF4gUE9TVEFHLkJBRDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBpdGVtX25ldyA9IGRlYnVnVG9rZW4oe1xuXHRcdFx0XHRcdC4uLml0ZW0sXG5cblx0XHRcdFx0XHR3OiBudyxcblx0XHRcdFx0XHRvdzogdyxcblx0XHRcdFx0XHRwLFxuXHRcdFx0XHRcdG9wOiBpdGVtLnAsXG5cblx0XHRcdFx0XHQvL1tSQVddOiBpdGVtLFxuXG5cdFx0XHRcdFx0Ly9zb3VyY2U6IGl0ZW0sXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRjb252ZXJ0U3lub255bTogdHJ1ZSxcblx0XHRcdFx0XHQvL19zb3VyY2U6IGl0ZW0sXG5cblx0XHRcdFx0XHQvKipcblx0XHRcdFx0XHQgKiBKU09OLnN0cmluZ2lmeVxuXHRcdFx0XHRcdCAqIGF2b2lkIFR5cGVFcnJvcjogQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTlxuXHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRcdF9zb3VyY2U6IGRlZXBtZXJnZSh7fSwgaXRlbSkgYXMgSVdvcmREZWJ1ZyxcblxuXHRcdFx0XHR9LCB0cnVlKTtcblxuXHRcdFx0XHRhLnB1c2goaXRlbV9uZXcpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRhLnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdGRlYnVnID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9LCBbXSBhcyBJV29yZERlYnVnW10pO1xuXHRcdHJldHVybiB7IGNvdW50OiBjb3VudCwgbGlzdDogbGlzdCB9IGFzIElDb252ZXJ0U3lub255bVdpdGhTaG93Y291bnQ7XG5cdH1cblxuXHRsZXQgcmVzdWx0OiBJQ29udmVydFN5bm9ueW1XaXRoU2hvd2NvdW50O1xuXHRkb1xuXHR7XG5cdFx0cmVzdWx0ID0gX2NvbnZlcnRTeW5vbnltKHJldCk7XG5cdFx0cmV0ID0gcmVzdWx0Lmxpc3Q7XG5cblx0XHRyZXN1bHQubGlzdCA9IHVuZGVmaW5lZDtcblx0fVxuXHR3aGlsZSAocmVzdWx0LmNvdW50ID4gMCk7XG5cblx0cmVzdWx0ID0gdW5kZWZpbmVkO1xuXG5cdGlmIChzaG93Y291bnQpXG5cdHtcblx0XHRyZXR1cm4geyBjb3VudDogdG90YWxfY291bnQsIGxpc3Q6IHJldCB9O1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cbiJdfQ==