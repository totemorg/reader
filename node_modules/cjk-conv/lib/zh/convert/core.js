"use strict";
/**
 * Created by user on 2018/8/2/002.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const array_hyper_unique_1 = require("array-hyper-unique");
const UString = require("uni-string");
const cjk_conv_1 = require("regexp-helper/lib/cjk-conv");
function charMap(s, table) {
    let t = table[s];
    return (typeof t === 'string') ? t : s;
}
exports.charMap = charMap;
function textMap1(text, table) {
    let toText = [];
    let len = text.length;
    for (let i = 0; i < len; i++) {
        toText[i] = charMap(text[i], table);
    }
    //console.log(toText.length, toText);
    return toText.join('');
}
exports.textMap1 = textMap1;
function textMap2(text, table) {
    let toText = UString.split(text, '');
    let len = toText.length;
    for (let i = 0; i < len; i++) {
        toText[i] = charMap(toText[i], table);
    }
    //console.log(toText.length, toText);
    return toText.join('');
}
exports.textMap2 = textMap2;
function textMap3(text, table) {
    let toText = text.split(/(?:)/u);
    let len = toText.length;
    for (let i = 0; i < len; i++) {
        toText[i] = charMap(toText[i], table);
    }
    //console.log(toText.length, toText);
    return toText.join('');
}
exports.textMap3 = textMap3;
function textMap4(text, table) {
    return text.replace(exports.REGEXP_TEST, function (s) {
        return charMap(s, table);
    });
}
exports.textMap4 = textMap4;
exports.textMap = textMap4;
const textMap = textMap4;
exports.default = exports;
function removeSame(table) {
    return Object.entries(table)
        .reduce(function (a, b) {
        let [k, v] = b;
        if (k != v) {
            a[k] = v;
        }
        return a;
    }, {});
}
exports.removeSame = removeSame;
exports.defaultOptions = Object.freeze({
    safe: true,
});
exports.REGEXP_TEST = cjk_conv_1._re_cjk_conv('ug');
exports.SAFE_MODE_CHAR = array_hyper_unique_1.array_unique([
    '后',
    '里',
    '餵',
    '志',
    '布',
    '佈',
    '系',
    '繫',
    '梁',
    '樑',
    '衝',
    '沖',
    '谷',
    '穀',
    '注',
    '克',
]);
function getOptionsSkip(options, skip = exports.SAFE_MODE_CHAR) {
    if (!options.skip) {
        options.skip = skip.slice();
    }
    else if (typeof options.skip == 'string') {
        options.skip += skip.join('');
    }
    else if (Array.isArray(options.skip)) {
        options.skip = options.skip.slice().concat(skip);
    }
    else {
        options.table = skip.reduce(function (a, b) {
            a[b] = b;
            return a;
        }, Object.assign({}, options.table || {}));
    }
    return options;
}
exports.getOptionsSkip = getOptionsSkip;
function getOptions(options = {}, defaultOpts = exports.defaultOptions, skip = exports.SAFE_MODE_CHAR) {
    options = Object.assign({}, defaultOpts, options);
    if (options.safe) {
        options = getOptionsSkip(options, skip);
        //console.log(options);
    }
    return options;
}
exports.getOptions = getOptions;
function _call(fn, text, options = {}, ...argv) {
    options = getOptions(options);
    if (options.skip || options.table || options.tableOnly) {
        let { skip, table, tableOnly } = options;
        let not_tableOnly = !tableOnly;
        if (tableOnly && !table) {
            throw new Error(`table is ${table}`);
        }
        return text.replace(exports.REGEXP_TEST, function (text) {
            if (skip && skip.indexOf(text) !== -1) {
                return text;
            }
            else if (table && typeof table == 'function') {
                let ret = table(fn, text, options, ...argv);
                if (ret !== null && typeof ret != 'undefined') {
                    return ret;
                }
            }
            else if (table && table[text]) {
                return table[text];
            }
            else if (not_tableOnly) {
                return fn(text);
            }
            return text;
        });
    }
    return fn(text, options, ...argv);
}
exports._call = _call;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDJEQUFrRDtBQUdsRCxzQ0FBdUM7QUFDdkMseURBQTBEO0FBTzFELFNBQWdCLE9BQU8sQ0FBQyxDQUFTLEVBQUUsS0FBYTtJQUUvQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN2QyxDQUFDO0FBSkQsMEJBSUM7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBWSxFQUFFLEtBQWE7SUFFbkQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFDNUI7UUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUNwQztJQUVELHFDQUFxQztJQUNyQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDdkIsQ0FBQztBQVpELDRCQVlDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQVksRUFBRSxLQUFhO0lBRW5ELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFFeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFDNUI7UUFDQyxN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QVksS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNyQztRQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBVyxFQUFFLFVBQVUsSUFBSTtZQUU5QyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNyQztnQkFDQyxPQUFPLElBQUksQ0FBQzthQUNaO2lCQUNJLElBQUksS0FBSyxJQUFJLE9BQU8sS0FBSyxJQUFJLFVBQVUsRUFDNUM7Z0JBQ0MsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBRTVDLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQzdDO29CQUNDLE9BQU8sR0FBRyxDQUFDO2lCQUNYO2FBQ0Q7aUJBQ0ksSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUM3QjtnQkFDQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQjtpQkFDSSxJQUFJLGFBQWEsRUFDdEI7Z0JBQ0MsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEI7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0tBQ0g7SUFFRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQTNDRCxzQkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzgvMi8wMDIuXG4gKi9cblxuaW1wb3J0IHsgYXJyYXlfdW5pcXVlIH0gZnJvbSAnYXJyYXktaHlwZXItdW5pcXVlJztcbmltcG9ydCAqIGFzIF90YWJsZV9jbjJ0dyBmcm9tICdjaGluZXNlX2NvbnZlcnQvY24ydHcnO1xuaW1wb3J0ICogYXMgX3RhYmxlX3R3MmNuIGZyb20gJ2NoaW5lc2VfY29udmVydC90dzJjbic7XG5pbXBvcnQgVVN0cmluZyA9IHJlcXVpcmUoJ3VuaS1zdHJpbmcnKTtcbmltcG9ydCB7IF9yZV9jamtfY29udiB9IGZyb20gJ3JlZ2V4cC1oZWxwZXIvbGliL2Nqay1jb252JztcblxuZXhwb3J0IGludGVyZmFjZSBJVGFibGVcbntcblx0W2tleTogc3RyaW5nXTogc3RyaW5nLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhck1hcChzOiBzdHJpbmcsIHRhYmxlOiBJVGFibGUpXG57XG5cdGxldCB0ID0gdGFibGVbc107XG5cdHJldHVybiAodHlwZW9mIHQgPT09ICdzdHJpbmcnKSA/IHQgOiBzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0TWFwMSh0ZXh0OiBzdHJpbmcsIHRhYmxlOiBJVGFibGUpXG57XG5cdGxldCB0b1RleHQgPSBbXTtcblx0bGV0IGxlbiA9IHRleHQubGVuZ3RoO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdHtcblx0XHR0b1RleHRbaV0gPSBjaGFyTWFwKHRleHRbaV0sIHRhYmxlKTtcblx0fVxuXG5cdC8vY29uc29sZS5sb2codG9UZXh0Lmxlbmd0aCwgdG9UZXh0KTtcblx0cmV0dXJuIHRvVGV4dC5qb2luKCcnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dE1hcDIodGV4dDogc3RyaW5nLCB0YWJsZTogSVRhYmxlKVxue1xuXHRsZXQgdG9UZXh0ID0gVVN0cmluZy5zcGxpdCh0ZXh0LCAnJyk7XG5cdGxldCBsZW4gPSB0b1RleHQubGVuZ3RoO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG5cdHtcblx0XHR0b1RleHRbaV0gPSBjaGFyTWFwKHRvVGV4dFtpXSwgdGFibGUpO1xuXHR9XG5cblx0Ly9jb25zb2xlLmxvZyh0b1RleHQubGVuZ3RoLCB0b1RleHQpO1xuXHRyZXR1cm4gdG9UZXh0LmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGV4dE1hcDModGV4dDogc3RyaW5nLCB0YWJsZTogSVRhYmxlKVxue1xuXHRsZXQgdG9UZXh0ID0gdGV4dC5zcGxpdCgvKD86KS91KTtcblx0bGV0IGxlbiA9IHRvVGV4dC5sZW5ndGg7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcblx0e1xuXHRcdHRvVGV4dFtpXSA9IGNoYXJNYXAodG9UZXh0W2ldLCB0YWJsZSk7XG5cdH1cblxuXHQvL2NvbnNvbGUubG9nKHRvVGV4dC5sZW5ndGgsIHRvVGV4dCk7XG5cdHJldHVybiB0b1RleHQuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0TWFwNCh0ZXh0OiBzdHJpbmcsIHRhYmxlOiBJVGFibGUpXG57XG5cdHJldHVybiB0ZXh0LnJlcGxhY2UoUkVHRVhQX1RFU1QsIGZ1bmN0aW9uIChzKVxuXHR7XG5cdFx0cmV0dXJuIGNoYXJNYXAocywgdGFibGUpO1xuXHR9KTtcbn1cblxuZXhwb3J0IHsgdGV4dE1hcDQgYXMgdGV4dE1hcCB9XG5jb25zdCB0ZXh0TWFwID0gdGV4dE1hcDQ7XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHMgYXMgdHlwZW9mIGltcG9ydCgnLi9jb3JlJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTYW1lKHRhYmxlOiBJVGFibGUpXG57XG5cdHJldHVybiBPYmplY3QuZW50cmllcyh0YWJsZSlcblx0XHQucmVkdWNlKGZ1bmN0aW9uIChhLCBiKVxuXHRcdHtcblx0XHRcdGxldCBbaywgdl0gPSBiO1xuXG5cdFx0XHRpZiAoayAhPSB2KVxuXHRcdFx0e1xuXHRcdFx0XHRhW2tdID0gdjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fSwge30gYXMgSVRhYmxlKVxuXHQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnNcbntcblx0LyoqXG5cdCAqIOW/veeVpeeahOWtlyBvciDku7vkvZXmlK/mj7QgaW5kZXhPZiDnmoQgT2JqZWN0XG5cdCAqL1xuXHRza2lwPyxcblxuXHR0YWJsZT86IElUYWJsZSB8IHR5cGVvZiBfY2FsbCxcblxuXHRzYWZlPzogYm9vbGVhbixcblxuXHR0YWJsZU9ubHk/OiBib29sZWFuLFxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBPYmplY3QuZnJlZXplKHtcblx0c2FmZTogdHJ1ZSxcbn0pO1xuZXhwb3J0IGNvbnN0IFJFR0VYUF9URVNUID0gX3JlX2Nqa19jb252KCd1ZycpO1xuXG5leHBvcnQgY29uc3QgU0FGRV9NT0RFX0NIQVIgPSBhcnJheV91bmlxdWUoW1xuXHQn5ZCOJyxcblx0J+mHjCcsXG5cdCfppLUnLFxuXHQn5b+XJyxcblx0J+W4gycsXG5cdCfkvYgnLFxuXHQn57O7Jyxcblx0J+e5qycsXG5cdCfmooEnLFxuXHQn5qiRJyxcblx0J+ihnScsXG5cdCfmspYnLFxuXHQn6LC3Jyxcblx0J+epgCcsXG5cdCfms6gnLFxuXHQn5YWLJyxcbl0pO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9uc1NraXAob3B0aW9uczogSU9wdGlvbnMsIHNraXAgPSBTQUZFX01PREVfQ0hBUilcbntcblx0aWYgKCFvcHRpb25zLnNraXApXG5cdHtcblx0XHRvcHRpb25zLnNraXAgPSBza2lwLnNsaWNlKCk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PSAnc3RyaW5nJylcblx0e1xuXHRcdG9wdGlvbnMuc2tpcCArPSBza2lwLmpvaW4oJycpO1xuXHR9XG5cdGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5za2lwKSlcblx0e1xuXHRcdG9wdGlvbnMuc2tpcCA9IG9wdGlvbnMuc2tpcC5zbGljZSgpLmNvbmNhdChza2lwKTtcblx0fVxuXHRlbHNlXG5cdHtcblx0XHRvcHRpb25zLnRhYmxlID0gc2tpcC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpXG5cdFx0e1xuXHRcdFx0YVtiXSA9IGI7XG5cblx0XHRcdHJldHVybiBhO1xuXHRcdH0sIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMudGFibGUgfHwge30pKTtcblx0fVxuXG5cdHJldHVybiBvcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3B0aW9ucyhvcHRpb25zOiBJT3B0aW9ucyA9IHt9LCBkZWZhdWx0T3B0cyA9IGRlZmF1bHRPcHRpb25zLCBza2lwID0gU0FGRV9NT0RFX0NIQVIpXG57XG5cdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0cywgb3B0aW9ucyk7XG5cblx0aWYgKG9wdGlvbnMuc2FmZSlcblx0e1xuXHRcdG9wdGlvbnMgPSBnZXRPcHRpb25zU2tpcChvcHRpb25zLCBza2lwKTtcblxuXHRcdC8vY29uc29sZS5sb2cob3B0aW9ucyk7XG5cdH1cblxuXHRyZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jYWxsKGZuLCB0ZXh0OiBzdHJpbmcsIG9wdGlvbnM6IElPcHRpb25zID0ge30sIC4uLmFyZ3YpXG57XG5cdG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMpO1xuXG5cdGlmIChvcHRpb25zLnNraXAgfHwgb3B0aW9ucy50YWJsZSB8fCBvcHRpb25zLnRhYmxlT25seSlcblx0e1xuXHRcdGxldCB7IHNraXAsIHRhYmxlLCB0YWJsZU9ubHkgfSA9IG9wdGlvbnM7XG5cdFx0bGV0IG5vdF90YWJsZU9ubHkgPSAhdGFibGVPbmx5O1xuXG5cdFx0aWYgKHRhYmxlT25seSAmJiAhdGFibGUpXG5cdFx0e1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGB0YWJsZSBpcyAke3RhYmxlfWApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoUkVHRVhQX1RFU1QsIGZ1bmN0aW9uICh0ZXh0KVxuXHRcdHtcblx0XHRcdGlmIChza2lwICYmIHNraXAuaW5kZXhPZih0ZXh0KSAhPT0gLTEpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodGFibGUgJiYgdHlwZW9mIHRhYmxlID09ICdmdW5jdGlvbicpXG5cdFx0XHR7XG5cdFx0XHRcdGxldCByZXQgPSB0YWJsZShmbiwgdGV4dCwgb3B0aW9ucywgLi4uYXJndik7XG5cblx0XHRcdFx0aWYgKHJldCAhPT0gbnVsbCAmJiB0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAodGFibGUgJiYgdGFibGVbdGV4dF0pXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiB0YWJsZVt0ZXh0XTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG5vdF90YWJsZU9ubHkpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBmbih0ZXh0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gZm4odGV4dCwgb3B0aW9ucywgLi4uYXJndik7XG59XG4iXX0=