"use strict";
/**
 * Created by user on 2018/7/29/029.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const uni_string_1 = require("uni-string");
function toStrTableArray(table, options = {}) {
    if (typeof table !== 'object' || Array.isArray(table)) {
        throw new TypeError(`table '${typeof table}' ${table}`);
    }
    let from = [];
    let to = [];
    const ks = Object.keys(table);
    ks.sort();
    let split = options.coreJs ? jsSplit : utf8Split;
    for (let k of ks) {
        let k2 = table[k];
        let s1 = split(k);
        let s2 = split(k2);
        if (s1.length !== 1 || s2.length !== 1) {
            let msg = `'${k}' s1: ${s1.length} ${s1} ; s2: ${s2.length} ${s2}`;
            if (options.ignore) {
                console.error(msg);
                continue;
            }
            else {
                //console.dir(s1);
                //console.dir(s2);
                throw new TypeError(msg);
                break;
            }
        }
        from.push(k);
        to.push(k2);
    }
    return {
        from,
        to,
    };
}
exports.toStrTableArray = toStrTableArray;
function toStrTable(table, options) {
    let { from, to, } = toStrTableArray(table, options);
    return {
        from: from.join(''),
        to: to.join(''),
    };
}
exports.toStrTable = toStrTable;
function jsSplit(s) {
    return s.split('');
}
exports.jsSplit = jsSplit;
function utf8Split(s) {
    return uni_string_1.default.split(s, '');
}
exports.utf8Split = utf8Split;
exports.default = exports;
//console.log(__filename, require.extensions);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdHJ0YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsMkNBQWlDO0FBUWpDLFNBQWdCLGVBQWUsQ0FBQyxLQUUvQixFQUFFLFVBQW9CLEVBQUU7SUFFeEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFDckQ7UUFDQyxNQUFNLElBQUksU0FBUyxDQUFDLFVBQVUsT0FBTyxLQUFLLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQztLQUN4RDtJQUVELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNkLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUVaLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRVYsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFakQsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ2hCO1FBQ0MsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxCLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkIsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDdEM7WUFDQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBRW5FLElBQUksT0FBTyxDQUFDLE1BQU0sRUFDbEI7Z0JBQ0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkIsU0FBUzthQUNUO2lCQUVEO2dCQUNDLGtCQUFrQjtnQkFDbEIsa0JBQWtCO2dCQUVsQixNQUFNLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QixNQUFNO2FBQ047U0FDRDtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ1o7SUFFRCxPQUFPO1FBQ04sSUFBSTtRQUNKLEVBQUU7S0FDRixDQUFBO0FBQ0YsQ0FBQztBQW5ERCwwQ0FtREM7QUFFRCxTQUFnQixVQUFVLENBQUMsS0FFMUIsRUFBRSxPQUFrQjtJQUVwQixJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsR0FBRyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNOLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuQixFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7S0FDZixDQUFBO0FBQ0YsQ0FBQztBQVZELGdDQVVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLENBQVM7SUFFaEMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFIRCwwQkFHQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxDQUFTO0lBRWxDLE9BQU8sb0JBQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFIRCw4QkFHQztBQUVELGtCQUFlLE9BQXNDLENBQUM7QUFFdEQsOENBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC83LzI5LzAyOS5cbiAqL1xuXG5pbXBvcnQgeyB0YWJsZV90dzJjbiwgdGFibGVfY24ydHcgfSBmcm9tICcuLi96aC9jb252ZXJ0L2luZGV4JztcbmltcG9ydCBVU3RyaW5nIGZyb20gJ3VuaS1zdHJpbmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRpb25zXG57XG5cdGNvcmVKcz86IGJvb2xlYW4sXG5cdGlnbm9yZT86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0clRhYmxlQXJyYXkodGFibGU6IHtcblx0W2s6IHN0cmluZ106IHN0cmluZyxcbn0sIG9wdGlvbnM6IElPcHRpb25zID0ge30pXG57XG5cdGlmICh0eXBlb2YgdGFibGUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGFibGUpKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgdGFibGUgJyR7dHlwZW9mIHRhYmxlfScgJHt0YWJsZX1gKTtcblx0fVxuXG5cdGxldCBmcm9tID0gW107XG5cdGxldCB0byA9IFtdO1xuXG5cdGNvbnN0IGtzID0gT2JqZWN0LmtleXModGFibGUpO1xuXHRrcy5zb3J0KCk7XG5cblx0bGV0IHNwbGl0ID0gb3B0aW9ucy5jb3JlSnMgPyBqc1NwbGl0IDogdXRmOFNwbGl0O1xuXG5cdGZvciAobGV0IGsgb2Yga3MpXG5cdHtcblx0XHRsZXQgazIgPSB0YWJsZVtrXTtcblxuXHRcdGxldCBzMSA9IHNwbGl0KGspO1xuXHRcdGxldCBzMiA9IHNwbGl0KGsyKTtcblxuXHRcdGlmIChzMS5sZW5ndGggIT09IDEgfHwgczIubGVuZ3RoICE9PSAxKVxuXHRcdHtcblx0XHRcdGxldCBtc2cgPSBgJyR7a30nIHMxOiAke3MxLmxlbmd0aH0gJHtzMX0gOyBzMjogJHtzMi5sZW5ndGh9ICR7czJ9YDtcblxuXHRcdFx0aWYgKG9wdGlvbnMuaWdub3JlKVxuXHRcdFx0e1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQvL2NvbnNvbGUuZGlyKHMxKTtcblx0XHRcdFx0Ly9jb25zb2xlLmRpcihzMik7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKG1zZyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZyb20ucHVzaChrKTtcblx0XHR0by5wdXNoKGsyKTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0ZnJvbSxcblx0XHR0byxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJUYWJsZSh0YWJsZToge1xuXHRbazogc3RyaW5nXTogc3RyaW5nLFxufSwgb3B0aW9ucz86IElPcHRpb25zKVxue1xuXHRsZXQgeyBmcm9tLCB0bywgfSA9IHRvU3RyVGFibGVBcnJheSh0YWJsZSwgb3B0aW9ucyk7XG5cblx0cmV0dXJuIHtcblx0XHRmcm9tOiBmcm9tLmpvaW4oJycpLFxuXHRcdHRvOiB0by5qb2luKCcnKSxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24ganNTcGxpdChzOiBzdHJpbmcpXG57XG5cdHJldHVybiBzLnNwbGl0KCcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhTcGxpdChzOiBzdHJpbmcpXG57XG5cdHJldHVybiBVU3RyaW5nLnNwbGl0KHMsICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL3N0cnRhYmxlJyk7XG5cbi8vY29uc29sZS5sb2coX19maWxlbmFtZSwgcmVxdWlyZS5leHRlbnNpb25zKTtcbiJdfQ==