"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const http = require("http");
const path = require("path");
// @ts-ignore
const eslint_1 = require("eslint");
const DB_URL = "http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt";
const FILE_PATH = path.join(__dirname, '..', "src/unicode/ids.ts");
const ID_START = /^([0-9a-z]+)(?:\.\.([0-9a-z]+))?[^;]*; ID_Start /i;
const ID_CONTINUE = /^([0-9a-z]+)(?:\.\.([0-9a-z]+))?[^;]*; ID_Continue /i;
const BORDER = 0x7f;
const logger = console;
var Mode;
(function (Mode) {
    Mode[Mode["Small"] = 0] = "Small";
    Mode[Mode["Former"] = 1] = "Former";
    Mode[Mode["Latter"] = 2] = "Latter";
})(Mode || (Mode = {}));
// Main
;
(async () => {
    let banner = "";
    const idStartSet = new Set();
    const idStartSmall = [];
    const idStartLarge = [];
    const idContinueSmall = [];
    const idContinueLarge = [];
    logger.log("Fetching data... (%s)", DB_URL);
    await processEachLine(line => {
        let m = null;
        if (banner === "") {
            logger.log("Processing data... (%s)", line.slice(2));
            banner = `/* Generated from ${line.slice(2)} */\n// @formatter:off`;
        }
        else if ((m = ID_START.exec(line)) != null) {
            const min = parseInt(m[1], 16);
            const max = m[2] ? parseInt(m[2], 16) : min;
            if (max <= BORDER) {
                idStartSmall.push([min, max]);
            }
            else {
                idStartSet.add(`${min}..${max}`);
                idStartLarge.push([min, max]);
            }
        }
        else if ((m = ID_CONTINUE.exec(line)) != null) {
            const min = parseInt(m[1], 16);
            const max = m[2] ? parseInt(m[2], 16) : min;
            if (max <= BORDER) {
                idContinueSmall.push([min, max]);
            }
            else if (!idStartSet.has(`${min}..${max}`)) {
                idContinueLarge.push([min, max]);
            }
        }
    });
    logger.log("Generating code...");
    let code = `${banner}
export function isIdStart(cp: number): boolean {
${makeSmallCondtion(idStartSmall, Mode.Small)}
return isLargeIdStart(cp)
}
export function isIdContinue(cp: number): boolean {
${makeSmallCondtion(idContinueSmall, Mode.Small)}
return isLargeIdStart(cp) || isLargeIdContinue(cp)
}
function isLargeIdStart(cp: number): boolean {
${makeCondition(idStartLarge, Mode.Former)}
}
function isLargeIdContinue(cp: number): boolean {
${makeCondition(idContinueLarge, Mode.Former)}
}`;
    logger.log("Formatting code...");
    const engine = new eslint_1.CLIEngine({
        fix: true,
        rules: { curly: "off" },
    });
    const result = engine.executeOnText(code, "ids.ts").results[0];
    code = result.output || code;
    logger.log("Writing '%s'...", FILE_PATH);
    await save(code);
    logger.log("Completed!");
})().catch(error => {
    logger.error(error.stack);
    process.exitCode = 1;
});
function processEachLine(cb) {
    return new Promise((resolve, reject) => {
        http
            .get(DB_URL, res => {
            let buffer = "";
            res.setEncoding("utf8");
            res.on("data", chunk => {
                const lines = (buffer + chunk).split("\n");
                if (lines.length === 1) {
                    buffer = lines[0];
                }
                else {
                    buffer = lines.pop();
                    for (const line of lines) {
                        cb(line);
                    }
                }
            });
            res.on("end", () => {
                if (buffer) {
                    cb(buffer);
                }
                resolve();
            });
            res.on("error", reject);
        })
            .on("error", reject);
    });
}
function makeCondition(ranges, mode) {
    if (ranges.length < 10) {
        return makeSmallCondtion(ranges, mode);
    }
    const middle = ranges.length >> 1;
    const ranges1 = ranges.slice(0, middle);
    const ranges2 = ranges.slice(middle);
    const pivot = ranges2[0][0];
    return `if (cp < 0x${pivot.toString(16)}) {
${makeCondition(ranges1, Mode.Former)}
}
${makeCondition(ranges2, Mode.Latter)}`;
}
function makeSmallCondtion(ranges, mode) {
    const conditions = [];
    for (const [min, max] of ranges) {
        if (min === max) {
            conditions.push(`if (cp === 0x${min.toString(16)}) return true`);
        }
        else {
            if (mode !== Mode.Latter || conditions.length !== 0) {
                conditions.push(`if (cp < 0x${min.toString(16)}) return false`);
            }
            conditions.push(`if (cp < 0x${(max + 1).toString(16)}) return true`);
        }
    }
    if (mode === Mode.Former || mode === Mode.Latter) {
        conditions.push("return false");
    }
    return conditions.join("\n");
}
function save(content) {
    return new Promise((resolve, reject) => {
        fs.writeFile(FILE_PATH, content, error => (error ? reject(error) : resolve()));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXVuaWNvZGUtaWRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlLXVuaWNvZGUtaWRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsYUFBYTtBQUNiLG1DQUFrQztBQUVsQyxNQUFNLE1BQU0sR0FBRyw2REFBNkQsQ0FBQTtBQUM1RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLENBQUMsQ0FBQTtBQUNsRSxNQUFNLFFBQVEsR0FBRyxtREFBbUQsQ0FBQTtBQUNwRSxNQUFNLFdBQVcsR0FBRyxzREFBc0QsQ0FBQTtBQUMxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDbkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFBO0FBRXRCLElBQUssSUFJSjtBQUpELFdBQUssSUFBSTtJQUNMLGlDQUFLLENBQUE7SUFDTCxtQ0FBTSxDQUFBO0lBQ04sbUNBQU0sQ0FBQTtBQUNWLENBQUMsRUFKSSxJQUFJLEtBQUosSUFBSSxRQUlSO0FBRUQsT0FBTztBQUNQLENBQUM7QUFBQSxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ1QsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO0lBQ2YsTUFBTSxVQUFVLEdBQWdCLElBQUksR0FBRyxFQUFFLENBQUE7SUFDekMsTUFBTSxZQUFZLEdBQTRCLEVBQUUsQ0FBQTtJQUNoRCxNQUFNLFlBQVksR0FBNEIsRUFBRSxDQUFBO0lBQ2hELE1BQU0sZUFBZSxHQUE0QixFQUFFLENBQUE7SUFDbkQsTUFBTSxlQUFlLEdBQTRCLEVBQUUsQ0FBQTtJQUVuRCxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzNDLE1BQU0sZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3pCLElBQUksQ0FBQyxHQUEyQixJQUFJLENBQUE7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S0FBSyxHQUFHLEVBQUU7WUFDYixVQUFVLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUNuRTthQUFNO1lBQ0gsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDakQsVUFBVSxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7YUFDbEU7WUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUN2RTtLQUNKO0lBQ0QsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUM5QyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0tBQ2xDO0lBQ0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFFRCxTQUFTLElBQUksQ0FBQyxPQUFlO0lBQ3pCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDbkMsRUFBRSxDQUFDLFNBQVMsQ0FDUixTQUFTLEVBQ1QsT0FBTyxFQUNQLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDL0MsQ0FBQTtJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoXCJmc1wiKVxuaW1wb3J0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKVxuaW1wb3J0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKVxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgQ0xJRW5naW5lIH0gZnJvbSBcImVzbGludFwiXG5cbmNvbnN0IERCX1VSTCA9IFwiaHR0cDovL3VuaWNvZGUub3JnL1B1YmxpYy9VTklEQVRBL0Rlcml2ZWRDb3JlUHJvcGVydGllcy50eHRcIlxuY29uc3QgRklMRV9QQVRIID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgXCJzcmMvdW5pY29kZS9pZHMudHNcIilcbmNvbnN0IElEX1NUQVJUID0gL14oWzAtOWEtel0rKSg/OlxcLlxcLihbMC05YS16XSspKT9bXjtdKjsgSURfU3RhcnQgL2lcbmNvbnN0IElEX0NPTlRJTlVFID0gL14oWzAtOWEtel0rKSg/OlxcLlxcLihbMC05YS16XSspKT9bXjtdKjsgSURfQ29udGludWUgL2lcbmNvbnN0IEJPUkRFUiA9IDB4N2ZcbmNvbnN0IGxvZ2dlciA9IGNvbnNvbGVcblxuZW51bSBNb2RlIHtcbiAgICBTbWFsbCxcbiAgICBGb3JtZXIsXG4gICAgTGF0dGVyLFxufVxuXG4vLyBNYWluXG47KGFzeW5jICgpID0+IHtcbiAgICBsZXQgYmFubmVyID0gXCJcIlxuICAgIGNvbnN0IGlkU3RhcnRTZXQ6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpXG4gICAgY29uc3QgaWRTdGFydFNtYWxsOiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPiA9IFtdXG4gICAgY29uc3QgaWRTdGFydExhcmdlOiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPiA9IFtdXG4gICAgY29uc3QgaWRDb250aW51ZVNtYWxsOiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPiA9IFtdXG4gICAgY29uc3QgaWRDb250aW51ZUxhcmdlOiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPiA9IFtdXG5cbiAgICBsb2dnZXIubG9nKFwiRmV0Y2hpbmcgZGF0YS4uLiAoJXMpXCIsIERCX1VSTClcbiAgICBhd2FpdCBwcm9jZXNzRWFjaExpbmUobGluZSA9PiB7XG4gICAgICAgIGxldCBtOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsID0gbnVsbFxuICAgICAgICBpZiAoYmFubmVyID09PSBcIlwiKSB7XG4gICAgICAgICAgICBsb2dnZXIubG9nKFwiUHJvY2Vzc2luZyBkYXRhLi4uICglcylcIiwgbGluZS5zbGljZSgyKSlcbiAgICAgICAgICAgIGJhbm5lciA9IGAvKiBHZW5lcmF0ZWQgZnJvbSAke2xpbmUuc2xpY2UoMil9ICovXFxuLy8gQGZvcm1hdHRlcjpvZmZgXG4gICAgICAgIH0gZWxzZSBpZiAoKG0gPSBJRF9TVEFSVC5leGVjKGxpbmUpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBwYXJzZUludChtWzFdLCAxNilcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IG1bMl0gPyBwYXJzZUludChtWzJdLCAxNikgOiBtaW5cbiAgICAgICAgICAgIGlmIChtYXggPD0gQk9SREVSKSB7XG4gICAgICAgICAgICAgICAgaWRTdGFydFNtYWxsLnB1c2goW21pbiwgbWF4XSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWRTdGFydFNldC5hZGQoYCR7bWlufS4uJHttYXh9YClcbiAgICAgICAgICAgICAgICBpZFN0YXJ0TGFyZ2UucHVzaChbbWluLCBtYXhdKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKChtID0gSURfQ09OVElOVUUuZXhlYyhsaW5lKSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbWluID0gcGFyc2VJbnQobVsxXSwgMTYpXG4gICAgICAgICAgICBjb25zdCBtYXggPSBtWzJdID8gcGFyc2VJbnQobVsyXSwgMTYpIDogbWluXG4gICAgICAgICAgICBpZiAobWF4IDw9IEJPUkRFUikge1xuICAgICAgICAgICAgICAgIGlkQ29udGludWVTbWFsbC5wdXNoKFttaW4sIG1heF0pXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpZFN0YXJ0U2V0LmhhcyhgJHttaW59Li4ke21heH1gKSkge1xuICAgICAgICAgICAgICAgIGlkQ29udGludWVMYXJnZS5wdXNoKFttaW4sIG1heF0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgbG9nZ2VyLmxvZyhcIkdlbmVyYXRpbmcgY29kZS4uLlwiKVxuICAgIGxldCBjb2RlID0gYCR7YmFubmVyfVxuZXhwb3J0IGZ1bmN0aW9uIGlzSWRTdGFydChjcDogbnVtYmVyKTogYm9vbGVhbiB7XG4ke21ha2VTbWFsbENvbmR0aW9uKGlkU3RhcnRTbWFsbCwgTW9kZS5TbWFsbCl9XG5yZXR1cm4gaXNMYXJnZUlkU3RhcnQoY3ApXG59XG5leHBvcnQgZnVuY3Rpb24gaXNJZENvbnRpbnVlKGNwOiBudW1iZXIpOiBib29sZWFuIHtcbiR7bWFrZVNtYWxsQ29uZHRpb24oaWRDb250aW51ZVNtYWxsLCBNb2RlLlNtYWxsKX1cbnJldHVybiBpc0xhcmdlSWRTdGFydChjcCkgfHwgaXNMYXJnZUlkQ29udGludWUoY3ApXG59XG5mdW5jdGlvbiBpc0xhcmdlSWRTdGFydChjcDogbnVtYmVyKTogYm9vbGVhbiB7XG4ke21ha2VDb25kaXRpb24oaWRTdGFydExhcmdlLCBNb2RlLkZvcm1lcil9XG59XG5mdW5jdGlvbiBpc0xhcmdlSWRDb250aW51ZShjcDogbnVtYmVyKTogYm9vbGVhbiB7XG4ke21ha2VDb25kaXRpb24oaWRDb250aW51ZUxhcmdlLCBNb2RlLkZvcm1lcil9XG59YFxuXG4gICAgbG9nZ2VyLmxvZyhcIkZvcm1hdHRpbmcgY29kZS4uLlwiKVxuICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBDTElFbmdpbmUoe1xuICAgICAgICBmaXg6IHRydWUsXG4gICAgICAgIHJ1bGVzOiB7IGN1cmx5OiBcIm9mZlwiIH0sXG4gICAgfSlcbiAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuZXhlY3V0ZU9uVGV4dChjb2RlLCBcImlkcy50c1wiKS5yZXN1bHRzWzBdXG4gICAgY29kZSA9IHJlc3VsdC5vdXRwdXQgfHwgY29kZVxuXG4gICAgbG9nZ2VyLmxvZyhcIldyaXRpbmcgJyVzJy4uLlwiLCBGSUxFX1BBVEgpXG4gICAgYXdhaXQgc2F2ZShjb2RlKVxuXG4gICAgbG9nZ2VyLmxvZyhcIkNvbXBsZXRlZCFcIilcbn0pKCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGxvZ2dlci5lcnJvcihlcnJvci5zdGFjaylcbiAgICBwcm9jZXNzLmV4aXRDb2RlID0gMVxufSlcblxuZnVuY3Rpb24gcHJvY2Vzc0VhY2hMaW5lKGNiOiAobGluZTogc3RyaW5nKSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaHR0cFxuICAgICAgICAgICAgLmdldChEQl9VUkwsIHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IFwiXCJcbiAgICAgICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoXCJ1dGY4XCIpXG4gICAgICAgICAgICAgICAgcmVzLm9uKFwiZGF0YVwiLCBjaHVuayA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gKGJ1ZmZlciArIGNodW5rKS5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBsaW5lc1swXVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gbGluZXMucG9wKCkhXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYihsaW5lKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXMub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYihidWZmZXIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXMub24oXCJlcnJvclwiLCByZWplY3QpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwiZXJyb3JcIiwgcmVqZWN0KVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIG1ha2VDb25kaXRpb24ocmFuZ2VzOiBbbnVtYmVyLCBudW1iZXJdW10sIG1vZGU6IE1vZGUpOiBzdHJpbmcge1xuICAgIGlmIChyYW5nZXMubGVuZ3RoIDwgMTApIHtcbiAgICAgICAgcmV0dXJuIG1ha2VTbWFsbENvbmR0aW9uKHJhbmdlcywgbW9kZSlcbiAgICB9XG5cbiAgICBjb25zdCBtaWRkbGUgPSByYW5nZXMubGVuZ3RoID4+IDFcbiAgICBjb25zdCByYW5nZXMxID0gcmFuZ2VzLnNsaWNlKDAsIG1pZGRsZSlcbiAgICBjb25zdCByYW5nZXMyID0gcmFuZ2VzLnNsaWNlKG1pZGRsZSlcbiAgICBjb25zdCBwaXZvdCA9IHJhbmdlczJbMF1bMF1cbiAgICByZXR1cm4gYGlmIChjcCA8IDB4JHtwaXZvdC50b1N0cmluZygxNil9KSB7XG4ke21ha2VDb25kaXRpb24ocmFuZ2VzMSwgTW9kZS5Gb3JtZXIpfVxufVxuJHttYWtlQ29uZGl0aW9uKHJhbmdlczIsIE1vZGUuTGF0dGVyKX1gXG59XG5cbmZ1bmN0aW9uIG1ha2VTbWFsbENvbmR0aW9uKHJhbmdlczogW251bWJlciwgbnVtYmVyXVtdLCBtb2RlOiBNb2RlKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25kaXRpb25zOiBzdHJpbmdbXSA9IFtdXG4gICAgZm9yIChjb25zdCBbbWluLCBtYXhdIG9mIHJhbmdlcykge1xuICAgICAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgICAgICAgIGNvbmRpdGlvbnMucHVzaChgaWYgKGNwID09PSAweCR7bWluLnRvU3RyaW5nKDE2KX0pIHJldHVybiB0cnVlYClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtb2RlICE9PSBNb2RlLkxhdHRlciB8fCBjb25kaXRpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMucHVzaChgaWYgKGNwIDwgMHgke21pbi50b1N0cmluZygxNil9KSByZXR1cm4gZmFsc2VgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZGl0aW9ucy5wdXNoKGBpZiAoY3AgPCAweCR7KG1heCArIDEpLnRvU3RyaW5nKDE2KX0pIHJldHVybiB0cnVlYClcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobW9kZSA9PT0gTW9kZS5Gb3JtZXIgfHwgbW9kZSA9PT0gTW9kZS5MYXR0ZXIpIHtcbiAgICAgICAgY29uZGl0aW9ucy5wdXNoKFwicmV0dXJuIGZhbHNlXCIpXG4gICAgfVxuICAgIHJldHVybiBjb25kaXRpb25zLmpvaW4oXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gc2F2ZShjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmcy53cml0ZUZpbGUoXG4gICAgICAgICAgICBGSUxFX1BBVEgsXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgZXJyb3IgPT4gKGVycm9yID8gcmVqZWN0KGVycm9yKSA6IHJlc29sdmUoKSksXG4gICAgICAgIClcbiAgICB9KVxufVxuIl19