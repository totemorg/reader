"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../src/index");
const Parser = require("../test/fixtures/parser/literal");
const Visitor = require("../test/fixtures/visitor");
const clone_without_circular_1 = require("./clone-without-circular");
for (const filename of Object.keys(Parser.Fixtures)) {
    const fixture = Parser.Fixtures[filename];
    const options = fixture.options;
    for (const pattern of Object.keys(fixture.patterns)) {
        try {
            const ast = index_1.parseRegExpLiteral(pattern, options);
            fixture.patterns[pattern] = { ast: clone_without_circular_1.cloneWithoutCircular(ast) };
        }
        catch (err) {
            fixture.patterns[pattern] = {
                error: { message: err.message, index: err.index },
            };
        }
    }
    Parser.save();
}
process.exit();
for (const filename of Object.keys(Visitor.Fixtures)) {
    const fixture = Visitor.Fixtures[filename];
    const options = fixture.options;
    for (const pattern of Object.keys(fixture.patterns)) {
        const ast = index_1.parseRegExpLiteral(pattern, options);
        const history = [];
        const enter = (node) => {
            history.push(`enter:${node.type}:${node.raw}`);
        };
        const leave = (node) => {
            history.push(`leave:${node.type}:${node.raw}`);
        };
        index_1.visitRegExpAST(ast, {
            onAlternativeEnter: enter,
            onAssertionEnter: enter,
            onBackreferenceEnter: enter,
            onCapturingGroupEnter: enter,
            onCharacterEnter: enter,
            onCharacterClassEnter: enter,
            onCharacterClassRangeEnter: enter,
            onCharacterSetEnter: enter,
            onFlagsEnter: enter,
            onGroupEnter: enter,
            onPatternEnter: enter,
            onQuantifierEnter: enter,
            onRegExpLiteralEnter: enter,
            onAlternativeLeave: leave,
            onAssertionLeave: leave,
            onBackreferenceLeave: leave,
            onCapturingGroupLeave: leave,
            onCharacterLeave: leave,
            onCharacterClassLeave: leave,
            onCharacterClassRangeLeave: leave,
            onCharacterSetLeave: leave,
            onFlagsLeave: leave,
            onGroupLeave: leave,
            onPatternLeave: leave,
            onQuantifierLeave: leave,
            onRegExpLiteralLeave: leave,
        });
        fixture.patterns[pattern] = history;
    }
    Visitor.save();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWZpeHR1cmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXBkYXRlLWZpeHR1cmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXNFO0FBQ3RFLDBEQUEwRDtBQUMxRCxvREFBb0Q7QUFDcEQscUVBQStEO0FBRS9ELEtBQUssTUFBTSxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDakQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN6QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFBO0lBRS9CLEtBQUssTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDakQsSUFBSTtZQUNBLE1BQU0sR0FBRyxHQUFHLDBCQUFrQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUNoRCxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLDZDQUFvQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUE7U0FDakU7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUc7Z0JBQ3hCLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFO2FBQ3BELENBQUE7U0FDSjtLQUNKO0lBRUQsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO0NBQ2hCO0FBRUQsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0FBRWYsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtJQUNsRCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUE7SUFFL0IsS0FBSyxNQUFNLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNqRCxNQUFNLEdBQUcsR0FBRywwQkFBa0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDaEQsTUFBTSxPQUFPLEdBQUcsRUFBYyxDQUFBO1FBQzlCLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBYyxFQUFRLEVBQUU7WUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7UUFDbEQsQ0FBQyxDQUFBO1FBQ0QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFjLEVBQVEsRUFBRTtZQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtRQUNsRCxDQUFDLENBQUE7UUFFRCxzQkFBYyxDQUFDLEdBQUcsRUFBRTtZQUNoQixrQkFBa0IsRUFBRSxLQUFLO1lBQ3pCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIsb0JBQW9CLEVBQUUsS0FBSztZQUMzQixxQkFBcUIsRUFBRSxLQUFLO1lBQzVCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIscUJBQXFCLEVBQUUsS0FBSztZQUM1QiwwQkFBMEIsRUFBRSxLQUFLO1lBQ2pDLG1CQUFtQixFQUFFLEtBQUs7WUFDMUIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsY0FBYyxFQUFFLEtBQUs7WUFDckIsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixvQkFBb0IsRUFBRSxLQUFLO1lBQzNCLGtCQUFrQixFQUFFLEtBQUs7WUFDekIsZ0JBQWdCLEVBQUUsS0FBSztZQUN2QixvQkFBb0IsRUFBRSxLQUFLO1lBQzNCLHFCQUFxQixFQUFFLEtBQUs7WUFDNUIsZ0JBQWdCLEVBQUUsS0FBSztZQUN2QixxQkFBcUIsRUFBRSxLQUFLO1lBQzVCLDBCQUEwQixFQUFFLEtBQUs7WUFDakMsbUJBQW1CLEVBQUUsS0FBSztZQUMxQixZQUFZLEVBQUUsS0FBSztZQUNuQixZQUFZLEVBQUUsS0FBSztZQUNuQixjQUFjLEVBQUUsS0FBSztZQUNyQixpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLG9CQUFvQixFQUFFLEtBQUs7U0FDOUIsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUE7S0FDdEM7SUFFRCxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBU1QsIHBhcnNlUmVnRXhwTGl0ZXJhbCwgdmlzaXRSZWdFeHBBU1QgfSBmcm9tIFwiLi4vc3JjL2luZGV4XCJcbmltcG9ydCBQYXJzZXIgPSByZXF1aXJlKFwiLi4vdGVzdC9maXh0dXJlcy9wYXJzZXIvbGl0ZXJhbFwiKVxuaW1wb3J0IFZpc2l0b3IgPSByZXF1aXJlKFwiLi4vdGVzdC9maXh0dXJlcy92aXNpdG9yXCIpXG5pbXBvcnQgeyBjbG9uZVdpdGhvdXRDaXJjdWxhciB9IGZyb20gXCIuL2Nsb25lLXdpdGhvdXQtY2lyY3VsYXJcIlxuXG5mb3IgKGNvbnN0IGZpbGVuYW1lIG9mIE9iamVjdC5rZXlzKFBhcnNlci5GaXh0dXJlcykpIHtcbiAgICBjb25zdCBmaXh0dXJlID0gUGFyc2VyLkZpeHR1cmVzW2ZpbGVuYW1lXVxuICAgIGNvbnN0IG9wdGlvbnMgPSBmaXh0dXJlLm9wdGlvbnNcblxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBPYmplY3Qua2V5cyhmaXh0dXJlLnBhdHRlcm5zKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYXN0ID0gcGFyc2VSZWdFeHBMaXRlcmFsKHBhdHRlcm4sIG9wdGlvbnMpXG4gICAgICAgICAgICBmaXh0dXJlLnBhdHRlcm5zW3BhdHRlcm5dID0geyBhc3Q6IGNsb25lV2l0aG91dENpcmN1bGFyKGFzdCkgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGZpeHR1cmUucGF0dGVybnNbcGF0dGVybl0gPSB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IHsgbWVzc2FnZTogZXJyLm1lc3NhZ2UsIGluZGV4OiBlcnIuaW5kZXggfSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIFBhcnNlci5zYXZlKClcbn1cblxucHJvY2Vzcy5leGl0KCk7XG5cbmZvciAoY29uc3QgZmlsZW5hbWUgb2YgT2JqZWN0LmtleXMoVmlzaXRvci5GaXh0dXJlcykpIHtcbiAgICBjb25zdCBmaXh0dXJlID0gVmlzaXRvci5GaXh0dXJlc1tmaWxlbmFtZV1cbiAgICBjb25zdCBvcHRpb25zID0gZml4dHVyZS5vcHRpb25zXG5cbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgT2JqZWN0LmtleXMoZml4dHVyZS5wYXR0ZXJucykpIHtcbiAgICAgICAgY29uc3QgYXN0ID0gcGFyc2VSZWdFeHBMaXRlcmFsKHBhdHRlcm4sIG9wdGlvbnMpXG4gICAgICAgIGNvbnN0IGhpc3RvcnkgPSBbXSBhcyBzdHJpbmdbXVxuICAgICAgICBjb25zdCBlbnRlciA9IChub2RlOiBBU1QuTm9kZSk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGBlbnRlcjoke25vZGUudHlwZX06JHtub2RlLnJhd31gKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlYXZlID0gKG5vZGU6IEFTVC5Ob2RlKTogdm9pZCA9PiB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goYGxlYXZlOiR7bm9kZS50eXBlfToke25vZGUucmF3fWApXG4gICAgICAgIH1cblxuICAgICAgICB2aXNpdFJlZ0V4cEFTVChhc3QsIHtcbiAgICAgICAgICAgIG9uQWx0ZXJuYXRpdmVFbnRlcjogZW50ZXIsXG4gICAgICAgICAgICBvbkFzc2VydGlvbkVudGVyOiBlbnRlcixcbiAgICAgICAgICAgIG9uQmFja3JlZmVyZW5jZUVudGVyOiBlbnRlcixcbiAgICAgICAgICAgIG9uQ2FwdHVyaW5nR3JvdXBFbnRlcjogZW50ZXIsXG4gICAgICAgICAgICBvbkNoYXJhY3RlckVudGVyOiBlbnRlcixcbiAgICAgICAgICAgIG9uQ2hhcmFjdGVyQ2xhc3NFbnRlcjogZW50ZXIsXG4gICAgICAgICAgICBvbkNoYXJhY3RlckNsYXNzUmFuZ2VFbnRlcjogZW50ZXIsXG4gICAgICAgICAgICBvbkNoYXJhY3RlclNldEVudGVyOiBlbnRlcixcbiAgICAgICAgICAgIG9uRmxhZ3NFbnRlcjogZW50ZXIsXG4gICAgICAgICAgICBvbkdyb3VwRW50ZXI6IGVudGVyLFxuICAgICAgICAgICAgb25QYXR0ZXJuRW50ZXI6IGVudGVyLFxuICAgICAgICAgICAgb25RdWFudGlmaWVyRW50ZXI6IGVudGVyLFxuICAgICAgICAgICAgb25SZWdFeHBMaXRlcmFsRW50ZXI6IGVudGVyLFxuICAgICAgICAgICAgb25BbHRlcm5hdGl2ZUxlYXZlOiBsZWF2ZSxcbiAgICAgICAgICAgIG9uQXNzZXJ0aW9uTGVhdmU6IGxlYXZlLFxuICAgICAgICAgICAgb25CYWNrcmVmZXJlbmNlTGVhdmU6IGxlYXZlLFxuICAgICAgICAgICAgb25DYXB0dXJpbmdHcm91cExlYXZlOiBsZWF2ZSxcbiAgICAgICAgICAgIG9uQ2hhcmFjdGVyTGVhdmU6IGxlYXZlLFxuICAgICAgICAgICAgb25DaGFyYWN0ZXJDbGFzc0xlYXZlOiBsZWF2ZSxcbiAgICAgICAgICAgIG9uQ2hhcmFjdGVyQ2xhc3NSYW5nZUxlYXZlOiBsZWF2ZSxcbiAgICAgICAgICAgIG9uQ2hhcmFjdGVyU2V0TGVhdmU6IGxlYXZlLFxuICAgICAgICAgICAgb25GbGFnc0xlYXZlOiBsZWF2ZSxcbiAgICAgICAgICAgIG9uR3JvdXBMZWF2ZTogbGVhdmUsXG4gICAgICAgICAgICBvblBhdHRlcm5MZWF2ZTogbGVhdmUsXG4gICAgICAgICAgICBvblF1YW50aWZpZXJMZWF2ZTogbGVhdmUsXG4gICAgICAgICAgICBvblJlZ0V4cExpdGVyYWxMZWF2ZTogbGVhdmUsXG4gICAgICAgIH0pXG5cbiAgICAgICAgZml4dHVyZS5wYXR0ZXJuc1twYXR0ZXJuXSA9IGhpc3RvcnlcbiAgICB9XG5cbiAgICBWaXNpdG9yLnNhdmUoKVxufVxuIl19