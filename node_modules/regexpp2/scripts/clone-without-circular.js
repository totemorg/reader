"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const relative = require("path").posix.relative;
function resolveLocation(obj, path, pathMap) {
    if (Array.isArray(obj)) {
        obj.forEach((el, index) => {
            if (typeof el === "object" && el !== null) {
                path.push(String(index));
                resolveLocation(el, path, pathMap);
                path.pop();
            }
        });
        return;
    }
    pathMap.set(obj, `/${path.join("/")}`);
    for (const key of Object.keys(obj)) {
        if (key === "parent" || key === "resolved" || key === "references") {
            continue;
        }
        const el = obj[key];
        if (typeof el === "object" && el !== null) {
            path.push(key);
            resolveLocation(el, path, pathMap);
            path.pop();
        }
    }
}
function cloneWithoutCircularRec(x, pathMap) {
    if (typeof x !== "object" || x === null) {
        return x;
    }
    if (Array.isArray(x)) {
        return x.map(el => cloneWithoutCircularRec(el, pathMap));
    }
    const y = {};
    for (const key of Object.keys(x)) {
        if (key === "parent" || key === "resolved" || key === "references") {
            y[key] = getRelativePath(x, x[key], pathMap);
        }
        else {
            y[key] = cloneWithoutCircularRec(x[key], pathMap);
        }
    }
    return y;
}
function getRelativePath(from, to, pathMap) {
    if (typeof to !== "object" || to === null) {
        return to;
    }
    if (Array.isArray(to)) {
        return to.map(el => getRelativePath(from, el, pathMap));
    }
    const fromPath = pathMap.get(from);
    const toPath = pathMap.get(to);
    try {
        return `‚ôªÔ∏è${relative(fromPath, toPath)}`;
    }
    catch (err) {
        console.error(fromPath, toPath, err.stack);
        return "üí•üí•üí•üí•üí•üí•üí•üí•";
    }
}
function cloneWithoutCircular(obj) {
    const path = [];
    const pathMap = new Map();
    resolveLocation(obj, path, pathMap);
    return cloneWithoutCircularRec(obj, pathMap);
}
exports.cloneWithoutCircular = cloneWithoutCircular;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmUtd2l0aG91dC1jaXJjdWxhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb25lLXdpdGhvdXQtY2lyY3VsYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQTtBQUUvQyxTQUFTLGVBQWUsQ0FDcEIsR0FBUSxFQUNSLElBQWMsRUFDZCxPQUE0QjtJQUU1QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN0QixJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO2dCQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2dCQUN4QixlQUFlLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtnQkFDbEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO2FBQ2I7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU07S0FDVDtJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDdEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2hDLElBQUksR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLEtBQUssVUFBVSxJQUFJLEdBQUcsS0FBSyxZQUFZLEVBQUU7WUFDaEUsU0FBUTtTQUNYO1FBQ0QsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLElBQUksT0FBTyxFQUFFLEtBQUssUUFBUSxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNkLGVBQWUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQ2xDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtTQUNiO0tBQ0o7QUFDTCxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxDQUFNLEVBQUUsT0FBNEI7SUFDakUsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNyQyxPQUFPLENBQUMsQ0FBQTtLQUNYO0lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO0tBQzNEO0lBRUQsTUFBTSxDQUFDLEdBQUcsRUFBUyxDQUFBO0lBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM5QixJQUFJLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLFVBQVUsSUFBSSxHQUFHLEtBQUssWUFBWSxFQUFFO1lBQ2hFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQTtTQUMvQzthQUFNO1lBQ0gsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQTtTQUNwRDtLQUNKO0lBQ0QsT0FBTyxDQUFDLENBQUE7QUFDWixDQUFDO0FBRUQsU0FBUyxlQUFlLENBQ3BCLElBQVksRUFDWixFQUFPLEVBQ1AsT0FBNEI7SUFFNUIsSUFBSSxPQUFPLEVBQUUsS0FBSyxRQUFRLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2QyxPQUFPLEVBQUUsQ0FBQTtLQUNaO0lBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ25CLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7S0FDMUQ7SUFFRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDOUIsSUFBSTtRQUNBLE9BQU8sS0FBSyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUE7S0FDM0M7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDMUMsT0FBTyxrQkFBa0IsQ0FBQTtLQUM1QjtBQUNMLENBQUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxHQUFXO0lBQzVDLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQTtJQUN6QixNQUFNLE9BQU8sR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUM5QyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUVuQyxPQUFPLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUNoRCxDQUFDO0FBTkQsb0RBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZWxhdGl2ZSA9IHJlcXVpcmUoXCJwYXRoXCIpLnBvc2l4LnJlbGF0aXZlXG5cbmZ1bmN0aW9uIHJlc29sdmVMb2NhdGlvbihcbiAgICBvYmo6IGFueSxcbiAgICBwYXRoOiBzdHJpbmdbXSxcbiAgICBwYXRoTWFwOiBNYXA8b2JqZWN0LCBzdHJpbmc+LFxuKTogdm9pZCB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBvYmouZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsID09PSBcIm9iamVjdFwiICYmIGVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKFN0cmluZyhpbmRleCkpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUxvY2F0aW9uKGVsLCBwYXRoLCBwYXRoTWFwKVxuICAgICAgICAgICAgICAgIHBhdGgucG9wKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcGF0aE1hcC5zZXQob2JqLCBgLyR7cGF0aC5qb2luKFwiL1wiKX1gKVxuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJwYXJlbnRcIiB8fCBrZXkgPT09IFwicmVzb2x2ZWRcIiB8fCBrZXkgPT09IFwicmVmZXJlbmNlc1wiKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsID0gb2JqW2tleV1cbiAgICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gXCJvYmplY3RcIiAmJiBlbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGF0aC5wdXNoKGtleSlcbiAgICAgICAgICAgIHJlc29sdmVMb2NhdGlvbihlbCwgcGF0aCwgcGF0aE1hcClcbiAgICAgICAgICAgIHBhdGgucG9wKClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xvbmVXaXRob3V0Q2lyY3VsYXJSZWMoeDogYW55LCBwYXRoTWFwOiBNYXA8b2JqZWN0LCBzdHJpbmc+KTogYW55IHtcbiAgICBpZiAodHlwZW9mIHggIT09IFwib2JqZWN0XCIgfHwgeCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4geFxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgICAgICByZXR1cm4geC5tYXAoZWwgPT4gY2xvbmVXaXRob3V0Q2lyY3VsYXJSZWMoZWwsIHBhdGhNYXApKVxuICAgIH1cblxuICAgIGNvbnN0IHkgPSB7fSBhcyBhbnlcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh4KSkge1xuICAgICAgICBpZiAoa2V5ID09PSBcInBhcmVudFwiIHx8IGtleSA9PT0gXCJyZXNvbHZlZFwiIHx8IGtleSA9PT0gXCJyZWZlcmVuY2VzXCIpIHtcbiAgICAgICAgICAgIHlba2V5XSA9IGdldFJlbGF0aXZlUGF0aCh4LCB4W2tleV0sIHBhdGhNYXApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5W2tleV0gPSBjbG9uZVdpdGhvdXRDaXJjdWxhclJlYyh4W2tleV0sIHBhdGhNYXApXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHlcbn1cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQYXRoKFxuICAgIGZyb206IG9iamVjdCxcbiAgICB0bzogYW55LFxuICAgIHBhdGhNYXA6IE1hcDxvYmplY3QsIHN0cmluZz4sXG4pOiBhbnkge1xuICAgIGlmICh0eXBlb2YgdG8gIT09IFwib2JqZWN0XCIgfHwgdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRvXG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRvKSkge1xuICAgICAgICByZXR1cm4gdG8ubWFwKGVsID0+IGdldFJlbGF0aXZlUGF0aChmcm9tLCBlbCwgcGF0aE1hcCkpXG4gICAgfVxuXG4gICAgY29uc3QgZnJvbVBhdGggPSBwYXRoTWFwLmdldChmcm9tKVxuICAgIGNvbnN0IHRvUGF0aCA9IHBhdGhNYXAuZ2V0KHRvKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBg4pm777iPJHtyZWxhdGl2ZShmcm9tUGF0aCwgdG9QYXRoKX1gXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZnJvbVBhdGgsIHRvUGF0aCwgZXJyLnN0YWNrKVxuICAgICAgICByZXR1cm4gXCLwn5Kl8J+SpfCfkqXwn5Kl8J+SpfCfkqXwn5Kl8J+SpVwiXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVXaXRob3V0Q2lyY3VsYXIob2JqOiBvYmplY3QpOiBvYmplY3Qge1xuICAgIGNvbnN0IHBhdGg6IHN0cmluZ1tdID0gW11cbiAgICBjb25zdCBwYXRoTWFwOiBNYXA8b2JqZWN0LCBzdHJpbmc+ID0gbmV3IE1hcCgpXG4gICAgcmVzb2x2ZUxvY2F0aW9uKG9iaiwgcGF0aCwgcGF0aE1hcClcblxuICAgIHJldHVybiBjbG9uZVdpdGhvdXRDaXJjdWxhclJlYyhvYmosIHBhdGhNYXApXG59XG4iXX0=